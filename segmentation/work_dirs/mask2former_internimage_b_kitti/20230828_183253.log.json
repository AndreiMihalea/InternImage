{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce GTX 1080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 12.1, V12.1.66\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+cefb275", "seed": 868639341, "exp_name": "mask2former_internimage_b_kitti.py", "mmseg_version": "0.30.0+cefb275", "config": "num_things_classes = 0\nnum_stuff_classes = 2\nnum_classes = 2\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2Former',\n    pretrained=None,\n    backbone=dict(\n        type='InternImage',\n        core_op='DCNv3',\n        channels=112,\n        depths=[4, 4, 21, 4],\n        groups=[7, 14, 28, 56],\n        mlp_ratio=4.0,\n        drop_path_rate=0.4,\n        norm_layer='LN',\n        layer_scale=1.0,\n        offset_scale=1.0,\n        post_norm=True,\n        with_cp=False,\n        out_indices=(0, 1, 2, 3),\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'\n        )),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[112, 224, 448, 896],\n        feat_channels=256,\n        out_channels=256,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=0,\n        num_stuff_classes=2,\n        num_queries=100,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=256,\n                        feedforward_channels=1024,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True),\n                        with_cp=True),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=128, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=128, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=256,\n                    num_heads=8,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=256,\n                    feedforward_channels=2048,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True,\n                    with_cp=True),\n                feedforward_channels=2048,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[1.0, 1.0, 0.1]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(200, 664),\n            stride=(341, 341))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(200, 664),\n        stride=(341, 341)),\n    init_cfg=None)\ndataset_type = 'UPBDataset'\ndata_root = '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation'\nimg_norm_cfg = dict(\n    mean=[89.497, 93.675, 92.645], std=[76.422, 78.611, 80.487], to_rgb=True)\ncrop_size = (200, 664)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='LoadCategory'),\n    dict(type='Resize', img_scale=(664, 200), ratio_range=None),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[89.497, 93.675, 92.645],\n        std=[76.422, 78.611, 80.487],\n        to_rgb=True),\n    dict(type='Pad', size=(200, 664), pad_val=0, seg_pad_val=0),\n    dict(type='ToMask'),\n    dict(type='ToSoft', num_iter=12, kernel_size=(11, 11), std_dev=5),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels', 'category'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(200, 664),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir='self_supervised_labels_30',\n        split='splits/val_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='LoadCategory'),\n            dict(type='Resize', img_scale=(664, 200), ratio_range=None),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='Pad', size=(200, 664), pad_val=0, seg_pad_val=0),\n            dict(type='ToMask'),\n            dict(type='ToSoft', num_iter=12, kernel_size=(11, 11), std_dev=5),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_semantic_seg', 'gt_masks', 'gt_labels',\n                    'category'\n                ])\n        ]),\n    val=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(200, 664),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(200, 664),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=2e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='CustomLayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(\n        num_layers=39,\n        layer_decay_rate=0.94,\n        depths=[5, 5, 24, 5],\n        offset_lr_scale=1.0))\noptimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=160000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)\nevaluation = dict(\n    interval=16000, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'\nwork_dir = 'work_dirs/mask2former_internimage_b_kitti'\ngpu_ids = range(0, 2)\nauto_resume = False\ndevice = 'cuda'\nseed = 868639341\n", "CLASSES": ["rest", "path"], "PALETTE": [[0, 0, 255], [255, 0, 0]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 6584, "data_time": 0.00707, "decode.loss_cls": 3.84152, "decode.loss_mask": 3.53806, "decode.loss_dice": 3.12614, "decode.d0.loss_cls": 2.30324, "decode.d0.loss_mask": 2.77579, "decode.d0.loss_dice": 2.85574, "decode.d1.loss_cls": 2.28104, "decode.d1.loss_mask": 3.03348, "decode.d1.loss_dice": 2.91629, "decode.d2.loss_cls": 2.60055, "decode.d2.loss_mask": 3.16113, "decode.d2.loss_dice": 2.97715, "decode.d3.loss_cls": 3.20009, "decode.d3.loss_mask": 3.29447, "decode.d3.loss_dice": 2.96619, "decode.d4.loss_cls": 2.8894, "decode.d4.loss_mask": 3.42025, "decode.d4.loss_dice": 2.92708, "decode.d5.loss_cls": 2.52711, "decode.d5.loss_mask": 3.45388, "decode.d5.loss_dice": 3.08757, "decode.d6.loss_cls": 1.52373, "decode.d6.loss_mask": 3.50849, "decode.d6.loss_dice": 3.06753, "decode.d7.loss_cls": 1.55612, "decode.d7.loss_mask": 3.53046, "decode.d7.loss_dice": 3.11736, "decode.d8.loss_cls": 2.7927, "decode.d8.loss_mask": 3.54607, "decode.d8.loss_dice": 3.11388, "loss": 88.93252, "grad_norm": 282.80548, "time": 0.69448}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0, "memory": 6584, "data_time": 0.04585, "decode.loss_cls": 2.35324, "decode.loss_mask": 3.55507, "decode.loss_dice": 3.07827, "decode.d0.loss_cls": 2.32578, "decode.d0.loss_mask": 2.35695, "decode.d0.loss_dice": 2.69854, "decode.d1.loss_cls": 1.96196, "decode.d1.loss_mask": 2.56946, "decode.d1.loss_dice": 2.72391, "decode.d2.loss_cls": 1.86814, "decode.d2.loss_mask": 2.83985, "decode.d2.loss_dice": 2.83721, "decode.d3.loss_cls": 2.16401, "decode.d3.loss_mask": 3.04183, "decode.d3.loss_dice": 2.86001, "decode.d4.loss_cls": 1.73349, "decode.d4.loss_mask": 3.28512, "decode.d4.loss_dice": 2.81856, "decode.d5.loss_cls": 1.56609, "decode.d5.loss_mask": 3.39336, "decode.d5.loss_dice": 2.95995, "decode.d6.loss_cls": 1.19271, "decode.d6.loss_mask": 3.48115, "decode.d6.loss_dice": 2.96469, "decode.d7.loss_cls": 1.21597, "decode.d7.loss_mask": 3.53029, "decode.d7.loss_dice": 3.05742, "decode.d8.loss_cls": 1.75915, "decode.d8.loss_mask": 3.57538, "decode.d8.loss_dice": 3.03276, "loss": 78.80031, "grad_norm": 200.60715, "time": 0.71067}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.0, "memory": 6584, "data_time": 0.04715, "decode.loss_cls": 1.33416, "decode.loss_mask": 3.48664, "decode.loss_dice": 3.01113, "decode.d0.loss_cls": 2.3285, "decode.d0.loss_mask": 1.56859, "decode.d0.loss_dice": 2.55945, "decode.d1.loss_cls": 1.54096, "decode.d1.loss_mask": 1.54453, "decode.d1.loss_dice": 2.50905, "decode.d2.loss_cls": 1.22268, "decode.d2.loss_mask": 1.81564, "decode.d2.loss_dice": 2.53351, "decode.d3.loss_cls": 1.27908, "decode.d3.loss_mask": 2.33001, "decode.d3.loss_dice": 2.77873, "decode.d4.loss_cls": 1.16849, "decode.d4.loss_mask": 2.74107, "decode.d4.loss_dice": 2.77047, "decode.d5.loss_cls": 1.11573, "decode.d5.loss_mask": 2.86611, "decode.d5.loss_dice": 2.8411, "decode.d6.loss_cls": 1.12609, "decode.d6.loss_mask": 3.01019, "decode.d6.loss_dice": 2.88026, "decode.d7.loss_cls": 1.17399, "decode.d7.loss_mask": 3.27438, "decode.d7.loss_dice": 2.92274, "decode.d8.loss_cls": 1.20477, "decode.d8.loss_mask": 3.469, "decode.d8.loss_dice": 2.96149, "loss": 67.36854, "grad_norm": 159.94582, "time": 0.72515}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0, "memory": 6584, "data_time": 0.04806, "decode.loss_cls": 1.13172, "decode.loss_mask": 2.67865, "decode.loss_dice": 2.77062, "decode.d0.loss_cls": 2.32795, "decode.d0.loss_mask": 1.14555, "decode.d0.loss_dice": 2.47727, "decode.d1.loss_cls": 1.21901, "decode.d1.loss_mask": 1.15079, "decode.d1.loss_dice": 2.39699, "decode.d2.loss_cls": 1.01488, "decode.d2.loss_mask": 1.18682, "decode.d2.loss_dice": 2.34086, "decode.d3.loss_cls": 1.04035, "decode.d3.loss_mask": 1.28748, "decode.d3.loss_dice": 2.48993, "decode.d4.loss_cls": 1.06891, "decode.d4.loss_mask": 1.40623, "decode.d4.loss_dice": 2.48743, "decode.d5.loss_cls": 1.02203, "decode.d5.loss_mask": 1.36405, "decode.d5.loss_dice": 2.47757, "decode.d6.loss_cls": 1.04773, "decode.d6.loss_mask": 1.49841, "decode.d6.loss_dice": 2.55157, "decode.d7.loss_cls": 1.09323, "decode.d7.loss_mask": 1.87357, "decode.d7.loss_dice": 2.60566, "decode.d8.loss_cls": 1.09938, "decode.d8.loss_mask": 2.31717, "decode.d8.loss_dice": 2.70046, "loss": 53.27227, "grad_norm": 153.9502, "time": 0.7317}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0, "memory": 6584, "data_time": 0.00427, "decode.loss_cls": 0.91918, "decode.loss_mask": 1.46445, "decode.loss_dice": 2.25627, "decode.d0.loss_cls": 2.32649, "decode.d0.loss_mask": 1.40703, "decode.d0.loss_dice": 2.28934, "decode.d1.loss_cls": 0.91144, "decode.d1.loss_mask": 1.3878, "decode.d1.loss_dice": 2.23159, "decode.d2.loss_cls": 0.76125, "decode.d2.loss_mask": 1.41447, "decode.d2.loss_dice": 2.1852, "decode.d3.loss_cls": 0.69132, "decode.d3.loss_mask": 1.44555, "decode.d3.loss_dice": 2.25764, "decode.d4.loss_cls": 0.67613, "decode.d4.loss_mask": 1.43419, "decode.d4.loss_dice": 2.22088, "decode.d5.loss_cls": 0.66692, "decode.d5.loss_mask": 1.5231, "decode.d5.loss_dice": 2.23658, "decode.d6.loss_cls": 0.6641, "decode.d6.loss_mask": 1.60325, "decode.d6.loss_dice": 2.27637, "decode.d7.loss_cls": 0.75753, "decode.d7.loss_mask": 1.50619, "decode.d7.loss_dice": 2.31344, "decode.d8.loss_cls": 0.81258, "decode.d8.loss_mask": 1.46151, "decode.d8.loss_dice": 2.25697, "loss": 46.35873, "grad_norm": 132.04933, "time": 0.68372}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0, "memory": 6584, "data_time": 0.04705, "decode.loss_cls": 0.52349, "decode.loss_mask": 1.63132, "decode.loss_dice": 2.17249, "decode.d0.loss_cls": 2.32474, "decode.d0.loss_mask": 1.61826, "decode.d0.loss_dice": 2.24914, "decode.d1.loss_cls": 0.72616, "decode.d1.loss_mask": 1.61861, "decode.d1.loss_dice": 2.17338, "decode.d2.loss_cls": 0.52567, "decode.d2.loss_mask": 1.62313, "decode.d2.loss_dice": 2.16982, "decode.d3.loss_cls": 0.38829, "decode.d3.loss_mask": 1.64836, "decode.d3.loss_dice": 2.19064, "decode.d4.loss_cls": 0.34144, "decode.d4.loss_mask": 1.65899, "decode.d4.loss_dice": 2.15262, "decode.d5.loss_cls": 0.3016, "decode.d5.loss_mask": 1.66376, "decode.d5.loss_dice": 2.18184, "decode.d6.loss_cls": 0.25811, "decode.d6.loss_mask": 1.66642, "decode.d6.loss_dice": 2.18716, "decode.d7.loss_cls": 0.32226, "decode.d7.loss_mask": 1.66041, "decode.d7.loss_dice": 2.20697, "decode.d8.loss_cls": 0.38582, "decode.d8.loss_mask": 1.65353, "decode.d8.loss_dice": 2.17114, "loss": 44.39556, "grad_norm": 151.83572, "time": 0.7165}
{"mode": "train", "epoch": 6, "iter": 350, "lr": 0.0, "memory": 6584, "data_time": 0.04774, "decode.loss_cls": 0.25869, "decode.loss_mask": 1.62986, "decode.loss_dice": 2.11349, "decode.d0.loss_cls": 2.32399, "decode.d0.loss_mask": 1.60627, "decode.d0.loss_dice": 2.21659, "decode.d1.loss_cls": 0.60229, "decode.d1.loss_mask": 1.61438, "decode.d1.loss_dice": 2.13744, "decode.d2.loss_cls": 0.32996, "decode.d2.loss_mask": 1.61681, "decode.d2.loss_dice": 2.13861, "decode.d3.loss_cls": 0.22653, "decode.d3.loss_mask": 1.63747, "decode.d3.loss_dice": 2.12458, "decode.d4.loss_cls": 0.1829, "decode.d4.loss_mask": 1.64493, "decode.d4.loss_dice": 2.09453, "decode.d5.loss_cls": 0.14374, "decode.d5.loss_mask": 1.63191, "decode.d5.loss_dice": 2.12218, "decode.d6.loss_cls": 0.10988, "decode.d6.loss_mask": 1.62424, "decode.d6.loss_dice": 2.11487, "decode.d7.loss_cls": 0.13575, "decode.d7.loss_mask": 1.62229, "decode.d7.loss_dice": 2.13099, "decode.d8.loss_cls": 0.16887, "decode.d8.loss_mask": 1.63723, "decode.d8.loss_dice": 2.10871, "loss": 42.04999, "grad_norm": 217.44582, "time": 0.73051}
{"mode": "train", "epoch": 7, "iter": 400, "lr": 0.0, "memory": 6584, "data_time": 0.04714, "decode.loss_cls": 0.15241, "decode.loss_mask": 1.63471, "decode.loss_dice": 2.04704, "decode.d0.loss_cls": 2.32329, "decode.d0.loss_mask": 1.62763, "decode.d0.loss_dice": 2.15947, "decode.d1.loss_cls": 0.53175, "decode.d1.loss_mask": 1.62742, "decode.d1.loss_dice": 2.07356, "decode.d2.loss_cls": 0.24694, "decode.d2.loss_mask": 1.64505, "decode.d2.loss_dice": 2.0594, "decode.d3.loss_cls": 0.15153, "decode.d3.loss_mask": 1.63684, "decode.d3.loss_dice": 2.05935, "decode.d4.loss_cls": 0.11962, "decode.d4.loss_mask": 1.65012, "decode.d4.loss_dice": 2.03537, "decode.d5.loss_cls": 0.09198, "decode.d5.loss_mask": 1.63619, "decode.d5.loss_dice": 2.04678, "decode.d6.loss_cls": 0.06745, "decode.d6.loss_mask": 1.62614, "decode.d6.loss_dice": 2.05001, "decode.d7.loss_cls": 0.08008, "decode.d7.loss_mask": 1.62373, "decode.d7.loss_dice": 2.05723, "decode.d8.loss_cls": 0.09934, "decode.d8.loss_mask": 1.63016, "decode.d8.loss_dice": 2.04191, "loss": 40.83251, "grad_norm": 301.64258, "time": 0.73421}
{"mode": "train", "epoch": 7, "iter": 450, "lr": 0.0, "memory": 6584, "data_time": 0.00425, "decode.loss_cls": 0.10583, "decode.loss_mask": 1.59526, "decode.loss_dice": 1.98272, "decode.d0.loss_cls": 2.32203, "decode.d0.loss_mask": 1.58582, "decode.d0.loss_dice": 2.12305, "decode.d1.loss_cls": 0.48036, "decode.d1.loss_mask": 1.59216, "decode.d1.loss_dice": 2.02443, "decode.d2.loss_cls": 0.19915, "decode.d2.loss_mask": 1.60615, "decode.d2.loss_dice": 1.99888, "decode.d3.loss_cls": 0.11308, "decode.d3.loss_mask": 1.59621, "decode.d3.loss_dice": 2.00298, "decode.d4.loss_cls": 0.09013, "decode.d4.loss_mask": 1.61087, "decode.d4.loss_dice": 1.97622, "decode.d5.loss_cls": 0.06776, "decode.d5.loss_mask": 1.59446, "decode.d5.loss_dice": 1.98839, "decode.d6.loss_cls": 0.0496, "decode.d6.loss_mask": 1.57959, "decode.d6.loss_dice": 1.98763, "decode.d7.loss_cls": 0.0593, "decode.d7.loss_mask": 1.59019, "decode.d7.loss_dice": 1.99137, "decode.d8.loss_cls": 0.06954, "decode.d8.loss_mask": 1.59458, "decode.d8.loss_dice": 1.98427, "loss": 39.56202, "grad_norm": 305.69527, "time": 0.68308}
{"mode": "train", "epoch": 8, "iter": 500, "lr": 0.0, "memory": 6584, "data_time": 0.04738, "decode.loss_cls": 0.07512, "decode.loss_mask": 1.56419, "decode.loss_dice": 1.99947, "decode.d0.loss_cls": 2.32012, "decode.d0.loss_mask": 1.56957, "decode.d0.loss_dice": 2.12997, "decode.d1.loss_cls": 0.43999, "decode.d1.loss_mask": 1.57509, "decode.d1.loss_dice": 2.03207, "decode.d2.loss_cls": 0.16806, "decode.d2.loss_mask": 1.58923, "decode.d2.loss_dice": 2.01341, "decode.d3.loss_cls": 0.08976, "decode.d3.loss_mask": 1.56982, "decode.d3.loss_dice": 2.01879, "decode.d4.loss_cls": 0.07149, "decode.d4.loss_mask": 1.58604, "decode.d4.loss_dice": 1.99008, "decode.d5.loss_cls": 0.05135, "decode.d5.loss_mask": 1.57169, "decode.d5.loss_dice": 2.00148, "decode.d6.loss_cls": 0.03674, "decode.d6.loss_mask": 1.55324, "decode.d6.loss_dice": 1.99786, "decode.d7.loss_cls": 0.044, "decode.d7.loss_mask": 1.56371, "decode.d7.loss_dice": 1.99941, "decode.d8.loss_cls": 0.05016, "decode.d8.loss_mask": 1.56223, "decode.d8.loss_dice": 2.00192, "loss": 39.23606, "grad_norm": 336.93945, "time": 0.72003}
{"mode": "train", "epoch": 9, "iter": 550, "lr": 0.0, "memory": 6584, "data_time": 0.04808, "decode.loss_cls": 0.06848, "decode.loss_mask": 1.53149, "decode.loss_dice": 1.91529, "decode.d0.loss_cls": 2.31849, "decode.d0.loss_mask": 1.55522, "decode.d0.loss_dice": 2.07457, "decode.d1.loss_cls": 0.40411, "decode.d1.loss_mask": 1.56089, "decode.d1.loss_dice": 1.96393, "decode.d2.loss_cls": 0.14867, "decode.d2.loss_mask": 1.57329, "decode.d2.loss_dice": 1.93547, "decode.d3.loss_cls": 0.08121, "decode.d3.loss_mask": 1.54046, "decode.d3.loss_dice": 1.94506, "decode.d4.loss_cls": 0.06903, "decode.d4.loss_mask": 1.55343, "decode.d4.loss_dice": 1.91384, "decode.d5.loss_cls": 0.05285, "decode.d5.loss_mask": 1.54124, "decode.d5.loss_dice": 1.92017, "decode.d6.loss_cls": 0.04231, "decode.d6.loss_mask": 1.54237, "decode.d6.loss_dice": 1.91202, "decode.d7.loss_cls": 0.04729, "decode.d7.loss_mask": 1.54248, "decode.d7.loss_dice": 1.91114, "decode.d8.loss_cls": 0.05078, "decode.d8.loss_mask": 1.53094, "decode.d8.loss_dice": 1.91332, "loss": 38.15985, "grad_norm": 397.95174, "time": 0.72781}
{"mode": "train", "epoch": 10, "iter": 600, "lr": 0.0, "memory": 6584, "data_time": 0.04714, "decode.loss_cls": 0.04894, "decode.loss_mask": 1.51386, "decode.loss_dice": 1.82904, "decode.d0.loss_cls": 2.3184, "decode.d0.loss_mask": 1.54415, "decode.d0.loss_dice": 2.0044, "decode.d1.loss_cls": 0.36627, "decode.d1.loss_mask": 1.54572, "decode.d1.loss_dice": 1.88639, "decode.d2.loss_cls": 0.12392, "decode.d2.loss_mask": 1.54497, "decode.d2.loss_dice": 1.85064, "decode.d3.loss_cls": 0.06171, "decode.d3.loss_mask": 1.52325, "decode.d3.loss_dice": 1.86114, "decode.d4.loss_cls": 0.05314, "decode.d4.loss_mask": 1.53599, "decode.d4.loss_dice": 1.83684, "decode.d5.loss_cls": 0.03819, "decode.d5.loss_mask": 1.52165, "decode.d5.loss_dice": 1.84026, "decode.d6.loss_cls": 0.02863, "decode.d6.loss_mask": 1.51817, "decode.d6.loss_dice": 1.82571, "decode.d7.loss_cls": 0.03322, "decode.d7.loss_mask": 1.52133, "decode.d7.loss_dice": 1.82647, "decode.d8.loss_cls": 0.03577, "decode.d8.loss_mask": 1.507, "decode.d8.loss_dice": 1.84144, "loss": 36.98662, "grad_norm": 423.48158, "time": 0.73893}
{"mode": "train", "epoch": 10, "iter": 650, "lr": 0.0, "memory": 6584, "data_time": 0.00428, "decode.loss_cls": 0.04073, "decode.loss_mask": 1.47424, "decode.loss_dice": 1.82585, "decode.d0.loss_cls": 2.31664, "decode.d0.loss_mask": 1.51628, "decode.d0.loss_dice": 1.99665, "decode.d1.loss_cls": 0.33731, "decode.d1.loss_mask": 1.49843, "decode.d1.loss_dice": 1.86837, "decode.d2.loss_cls": 0.10953, "decode.d2.loss_mask": 1.49345, "decode.d2.loss_dice": 1.83914, "decode.d3.loss_cls": 0.05319, "decode.d3.loss_mask": 1.47158, "decode.d3.loss_dice": 1.84433, "decode.d4.loss_cls": 0.04503, "decode.d4.loss_mask": 1.47974, "decode.d4.loss_dice": 1.82284, "decode.d5.loss_cls": 0.03269, "decode.d5.loss_mask": 1.46211, "decode.d5.loss_dice": 1.82648, "decode.d6.loss_cls": 0.02466, "decode.d6.loss_mask": 1.46206, "decode.d6.loss_dice": 1.81962, "decode.d7.loss_cls": 0.02794, "decode.d7.loss_mask": 1.46946, "decode.d7.loss_dice": 1.81514, "decode.d8.loss_cls": 0.02972, "decode.d8.loss_mask": 1.46085, "decode.d8.loss_dice": 1.81991, "loss": 36.28396, "grad_norm": 428.53545, "time": 0.68739}
{"mode": "train", "epoch": 11, "iter": 700, "lr": 0.0, "memory": 6584, "data_time": 0.04745, "decode.loss_cls": 0.03444, "decode.loss_mask": 1.5083, "decode.loss_dice": 1.82725, "decode.d0.loss_cls": 2.31523, "decode.d0.loss_mask": 1.5535, "decode.d0.loss_dice": 1.98817, "decode.d1.loss_cls": 0.30157, "decode.d1.loss_mask": 1.53631, "decode.d1.loss_dice": 1.88035, "decode.d2.loss_cls": 0.09549, "decode.d2.loss_mask": 1.52852, "decode.d2.loss_dice": 1.84979, "decode.d3.loss_cls": 0.04524, "decode.d3.loss_mask": 1.51289, "decode.d3.loss_dice": 1.85056, "decode.d4.loss_cls": 0.0382, "decode.d4.loss_mask": 1.51882, "decode.d4.loss_dice": 1.83488, "decode.d5.loss_cls": 0.02851, "decode.d5.loss_mask": 1.50006, "decode.d5.loss_dice": 1.83034, "decode.d6.loss_cls": 0.02089, "decode.d6.loss_mask": 1.49974, "decode.d6.loss_dice": 1.8225, "decode.d7.loss_cls": 0.02424, "decode.d7.loss_mask": 1.49855, "decode.d7.loss_dice": 1.82317, "decode.d8.loss_cls": 0.0252, "decode.d8.loss_mask": 1.49115, "decode.d8.loss_dice": 1.82803, "loss": 36.61188, "grad_norm": 500.63846, "time": 0.72639}
{"mode": "train", "epoch": 12, "iter": 750, "lr": 0.0, "memory": 6584, "data_time": 0.04792, "decode.loss_cls": 0.03617, "decode.loss_mask": 1.43118, "decode.loss_dice": 1.72669, "decode.d0.loss_cls": 2.31474, "decode.d0.loss_mask": 1.46241, "decode.d0.loss_dice": 1.92269, "decode.d1.loss_cls": 0.28132, "decode.d1.loss_mask": 1.4644, "decode.d1.loss_dice": 1.77839, "decode.d2.loss_cls": 0.08851, "decode.d2.loss_mask": 1.46167, "decode.d2.loss_dice": 1.7492, "decode.d3.loss_cls": 0.04308, "decode.d3.loss_mask": 1.43413, "decode.d3.loss_dice": 1.75384, "decode.d4.loss_cls": 0.0391, "decode.d4.loss_mask": 1.45226, "decode.d4.loss_dice": 1.72949, "decode.d5.loss_cls": 0.02953, "decode.d5.loss_mask": 1.44108, "decode.d5.loss_dice": 1.72383, "decode.d6.loss_cls": 0.02356, "decode.d6.loss_mask": 1.43725, "decode.d6.loss_dice": 1.71493, "decode.d7.loss_cls": 0.027, "decode.d7.loss_mask": 1.43786, "decode.d7.loss_dice": 1.72105, "decode.d8.loss_cls": 0.0275, "decode.d8.loss_mask": 1.42806, "decode.d8.loss_dice": 1.72401, "loss": 34.90494, "grad_norm": 540.73936, "time": 0.72872}
{"mode": "train", "epoch": 13, "iter": 800, "lr": 0.0, "memory": 6584, "data_time": 0.04866, "decode.loss_cls": 0.02759, "decode.loss_mask": 1.35298, "decode.loss_dice": 1.65121, "decode.d0.loss_cls": 2.31308, "decode.d0.loss_mask": 1.39361, "decode.d0.loss_dice": 1.85549, "decode.d1.loss_cls": 0.2552, "decode.d1.loss_mask": 1.38253, "decode.d1.loss_dice": 1.713, "decode.d2.loss_cls": 0.07934, "decode.d2.loss_mask": 1.37885, "decode.d2.loss_dice": 1.68438, "decode.d3.loss_cls": 0.03706, "decode.d3.loss_mask": 1.35869, "decode.d3.loss_dice": 1.67556, "decode.d4.loss_cls": 0.03238, "decode.d4.loss_mask": 1.36299, "decode.d4.loss_dice": 1.65917, "decode.d5.loss_cls": 0.02429, "decode.d5.loss_mask": 1.35179, "decode.d5.loss_dice": 1.66107, "decode.d6.loss_cls": 0.01974, "decode.d6.loss_mask": 1.34785, "decode.d6.loss_dice": 1.65301, "decode.d7.loss_cls": 0.02149, "decode.d7.loss_mask": 1.35063, "decode.d7.loss_dice": 1.64546, "decode.d8.loss_cls": 0.02211, "decode.d8.loss_mask": 1.34461, "decode.d8.loss_dice": 1.65314, "loss": 33.30828, "grad_norm": 493.19789, "time": 0.73731}
{"mode": "train", "epoch": 13, "iter": 850, "lr": 0.0, "memory": 6584, "data_time": 0.0047, "decode.loss_cls": 0.0389, "decode.loss_mask": 1.27202, "decode.loss_dice": 1.58862, "decode.d0.loss_cls": 2.31033, "decode.d0.loss_mask": 1.33488, "decode.d0.loss_dice": 1.80337, "decode.d1.loss_cls": 0.24195, "decode.d1.loss_mask": 1.33122, "decode.d1.loss_dice": 1.64753, "decode.d2.loss_cls": 0.08324, "decode.d2.loss_mask": 1.31971, "decode.d2.loss_dice": 1.61525, "decode.d3.loss_cls": 0.045, "decode.d3.loss_mask": 1.29291, "decode.d3.loss_dice": 1.61665, "decode.d4.loss_cls": 0.04248, "decode.d4.loss_mask": 1.28981, "decode.d4.loss_dice": 1.59341, "decode.d5.loss_cls": 0.03553, "decode.d5.loss_mask": 1.27751, "decode.d5.loss_dice": 1.59157, "decode.d6.loss_cls": 0.03263, "decode.d6.loss_mask": 1.27602, "decode.d6.loss_dice": 1.58196, "decode.d7.loss_cls": 0.03437, "decode.d7.loss_mask": 1.28602, "decode.d7.loss_dice": 1.58436, "decode.d8.loss_cls": 0.03451, "decode.d8.loss_mask": 1.27903, "decode.d8.loss_dice": 1.59778, "loss": 32.07856, "grad_norm": 587.76832, "time": 0.68967}
