{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce GTX 1080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 12.1, V12.1.66\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+cefb275", "seed": 1644450066, "exp_name": "mask2former_internimage_b_kitti.py", "mmseg_version": "0.30.0+cefb275", "config": "num_things_classes = 0\nnum_stuff_classes = 2\nnum_classes = 2\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2Former',\n    pretrained=None,\n    backbone=dict(\n        type='InternImage',\n        core_op='DCNv3',\n        channels=112,\n        depths=[4, 4, 21, 4],\n        groups=[7, 14, 28, 56],\n        mlp_ratio=4.0,\n        drop_path_rate=0.4,\n        norm_layer='LN',\n        layer_scale=1.0,\n        offset_scale=1.0,\n        post_norm=True,\n        with_cp=False,\n        out_indices=(0, 1, 2, 3),\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'\n        )),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[112, 224, 448, 896],\n        feat_channels=256,\n        out_channels=256,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=0,\n        num_stuff_classes=2,\n        num_queries=100,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=256,\n                        feedforward_channels=1024,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True),\n                        with_cp=True),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=128, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=128, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=256,\n                    num_heads=8,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=256,\n                    feedforward_channels=2048,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True,\n                    with_cp=True),\n                feedforward_channels=2048,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[1.0, 1.0, 0.1]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(200, 664),\n            stride=(341, 341))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(200, 664),\n        stride=(341, 341)),\n    init_cfg=None)\ndataset_type = 'UPBDataset'\ndata_root = '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation'\nimg_norm_cfg = dict(\n    mean=[89.497, 93.675, 92.645], std=[76.422, 78.611, 80.487], to_rgb=True)\ncrop_size = (200, 664)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='LoadCategory'),\n    dict(type='Resize', img_scale=(664, 200), ratio_range=None),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[89.497, 93.675, 92.645],\n        std=[76.422, 78.611, 80.487],\n        to_rgb=True),\n    dict(type='Pad', size=(200, 664), pad_val=0, seg_pad_val=0),\n    dict(type='ToMask'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels', 'category'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(200, 664),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir='self_supervised_labels_30',\n        split='splits/val_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='LoadCategory'),\n            dict(type='Resize', img_scale=(664, 200), ratio_range=None),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='Pad', size=(200, 664), pad_val=0, seg_pad_val=0),\n            dict(type='ToMask'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_semantic_seg', 'gt_masks', 'gt_labels',\n                    'category'\n                ])\n        ]),\n    val=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(200, 664),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(200, 664),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=2e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='CustomLayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(\n        num_layers=39,\n        layer_decay_rate=0.94,\n        depths=[5, 5, 24, 5],\n        offset_lr_scale=1.0))\noptimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=160000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)\nevaluation = dict(\n    interval=16000, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'\nwork_dir = 'work_dirs/mask2former_internimage_b_kitti'\ngpu_ids = range(0, 2)\nauto_resume = False\ndevice = 'cuda'\nseed = 1644450066\n", "CLASSES": ["rest", "path"], "PALETTE": [[0, 0, 255], [255, 0, 0]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 6584, "data_time": 0.00709, "decode.loss_cls": 1.85299, "decode.loss_mask": 3.51319, "decode.loss_dice": 3.00679, "decode.d0.loss_cls": 2.20252, "decode.d0.loss_mask": 2.25942, "decode.d0.loss_dice": 2.57471, "decode.d1.loss_cls": 1.95932, "decode.d1.loss_mask": 2.59461, "decode.d1.loss_dice": 2.68572, "decode.d2.loss_cls": 2.57635, "decode.d2.loss_mask": 2.962, "decode.d2.loss_dice": 2.81833, "decode.d3.loss_cls": 3.90173, "decode.d3.loss_mask": 3.16484, "decode.d3.loss_dice": 3.04015, "decode.d4.loss_cls": 2.23946, "decode.d4.loss_mask": 3.12735, "decode.d4.loss_dice": 2.72331, "decode.d5.loss_cls": 2.72601, "decode.d5.loss_mask": 3.26829, "decode.d5.loss_dice": 2.86255, "decode.d6.loss_cls": 2.47608, "decode.d6.loss_mask": 3.39955, "decode.d6.loss_dice": 2.96074, "decode.d7.loss_cls": 2.1172, "decode.d7.loss_mask": 3.58487, "decode.d7.loss_dice": 2.81339, "decode.d8.loss_cls": 1.80107, "decode.d8.loss_mask": 3.55069, "decode.d8.loss_dice": 3.03465, "loss": 83.7979, "grad_norm": 275.35245, "time": 0.68542}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0, "memory": 6584, "data_time": 0.04628, "decode.loss_cls": 1.35587, "decode.loss_mask": 3.522, "decode.loss_dice": 2.97143, "decode.d0.loss_cls": 2.20249, "decode.d0.loss_mask": 2.04704, "decode.d0.loss_dice": 2.54654, "decode.d1.loss_cls": 1.66639, "decode.d1.loss_mask": 2.41723, "decode.d1.loss_dice": 2.70499, "decode.d2.loss_cls": 1.91261, "decode.d2.loss_mask": 2.70311, "decode.d2.loss_dice": 2.77691, "decode.d3.loss_cls": 2.57632, "decode.d3.loss_mask": 2.7933, "decode.d3.loss_dice": 2.9163, "decode.d4.loss_cls": 1.42242, "decode.d4.loss_mask": 2.82886, "decode.d4.loss_dice": 2.7714, "decode.d5.loss_cls": 1.6356, "decode.d5.loss_mask": 3.08665, "decode.d5.loss_dice": 2.86183, "decode.d6.loss_cls": 1.50961, "decode.d6.loss_mask": 3.33788, "decode.d6.loss_dice": 3.01546, "decode.d7.loss_cls": 1.36493, "decode.d7.loss_mask": 3.51419, "decode.d7.loss_dice": 2.88117, "decode.d8.loss_cls": 1.29822, "decode.d8.loss_mask": 3.56323, "decode.d8.loss_dice": 3.03716, "loss": 75.24113, "grad_norm": 208.94187, "time": 0.71316}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.0, "memory": 6584, "data_time": 0.04712, "decode.loss_cls": 1.16524, "decode.loss_mask": 3.34686, "decode.loss_dice": 2.93466, "decode.d0.loss_cls": 2.20958, "decode.d0.loss_mask": 1.52421, "decode.d0.loss_dice": 2.42917, "decode.d1.loss_cls": 1.16014, "decode.d1.loss_mask": 1.67724, "decode.d1.loss_dice": 2.51435, "decode.d2.loss_cls": 1.21006, "decode.d2.loss_mask": 1.87236, "decode.d2.loss_dice": 2.52694, "decode.d3.loss_cls": 1.39235, "decode.d3.loss_mask": 1.76849, "decode.d3.loss_dice": 2.5764, "decode.d4.loss_cls": 1.08554, "decode.d4.loss_mask": 1.96794, "decode.d4.loss_dice": 2.54398, "decode.d5.loss_cls": 1.16527, "decode.d5.loss_mask": 2.25049, "decode.d5.loss_dice": 2.70893, "decode.d6.loss_cls": 1.1572, "decode.d6.loss_mask": 2.77559, "decode.d6.loss_dice": 2.87388, "decode.d7.loss_cls": 1.13034, "decode.d7.loss_mask": 3.05473, "decode.d7.loss_dice": 2.86986, "decode.d8.loss_cls": 1.15058, "decode.d8.loss_mask": 3.38022, "decode.d8.loss_dice": 2.99174, "loss": 63.41433, "grad_norm": 184.46449, "time": 0.72299}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0, "memory": 6584, "data_time": 0.04946, "decode.loss_cls": 1.11846, "decode.loss_mask": 2.26876, "decode.loss_dice": 2.70943, "decode.d0.loss_cls": 2.18642, "decode.d0.loss_mask": 1.40319, "decode.d0.loss_dice": 2.36364, "decode.d1.loss_cls": 0.90025, "decode.d1.loss_mask": 1.27234, "decode.d1.loss_dice": 2.33104, "decode.d2.loss_cls": 0.87114, "decode.d2.loss_mask": 1.35375, "decode.d2.loss_dice": 2.31373, "decode.d3.loss_cls": 0.96894, "decode.d3.loss_mask": 1.2902, "decode.d3.loss_dice": 2.32223, "decode.d4.loss_cls": 0.95198, "decode.d4.loss_mask": 1.29309, "decode.d4.loss_dice": 2.32306, "decode.d5.loss_cls": 1.04897, "decode.d5.loss_mask": 1.35053, "decode.d5.loss_dice": 2.41645, "decode.d6.loss_cls": 1.02014, "decode.d6.loss_mask": 1.47508, "decode.d6.loss_dice": 2.50036, "decode.d7.loss_cls": 1.04914, "decode.d7.loss_mask": 1.71623, "decode.d7.loss_dice": 2.5086, "decode.d8.loss_cls": 1.10638, "decode.d8.loss_mask": 2.10668, "decode.d8.loss_dice": 2.59146, "loss": 51.13165, "grad_norm": 150.75438, "time": 0.72762}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0, "memory": 6584, "data_time": 0.00421, "decode.loss_cls": 0.89833, "decode.loss_mask": 1.58981, "decode.loss_dice": 2.32113, "decode.d0.loss_cls": 2.10422, "decode.d0.loss_mask": 1.71632, "decode.d0.loss_dice": 2.31367, "decode.d1.loss_cls": 0.65948, "decode.d1.loss_mask": 1.54934, "decode.d1.loss_dice": 2.2295, "decode.d2.loss_cls": 0.60447, "decode.d2.loss_mask": 1.60247, "decode.d2.loss_dice": 2.22796, "decode.d3.loss_cls": 0.62835, "decode.d3.loss_mask": 1.56151, "decode.d3.loss_dice": 2.2461, "decode.d4.loss_cls": 0.67374, "decode.d4.loss_mask": 1.62685, "decode.d4.loss_dice": 2.213, "decode.d5.loss_cls": 0.72141, "decode.d5.loss_mask": 1.62868, "decode.d5.loss_dice": 2.26083, "decode.d6.loss_cls": 0.66856, "decode.d6.loss_mask": 1.60668, "decode.d6.loss_dice": 2.29884, "decode.d7.loss_cls": 0.70164, "decode.d7.loss_mask": 1.61984, "decode.d7.loss_dice": 2.28175, "decode.d8.loss_cls": 0.82459, "decode.d8.loss_mask": 1.58129, "decode.d8.loss_dice": 2.24687, "loss": 47.2072, "grad_norm": 139.18567, "time": 0.68088}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0, "memory": 6584, "data_time": 0.04761, "decode.loss_cls": 0.54304, "decode.loss_mask": 1.60408, "decode.loss_dice": 2.23962, "decode.d0.loss_cls": 2.09822, "decode.d0.loss_mask": 1.70637, "decode.d0.loss_dice": 2.24207, "decode.d1.loss_cls": 0.50092, "decode.d1.loss_mask": 1.59659, "decode.d1.loss_dice": 2.2016, "decode.d2.loss_cls": 0.39797, "decode.d2.loss_mask": 1.59992, "decode.d2.loss_dice": 2.20195, "decode.d3.loss_cls": 0.3561, "decode.d3.loss_mask": 1.58975, "decode.d3.loss_dice": 2.19905, "decode.d4.loss_cls": 0.35945, "decode.d4.loss_mask": 1.62019, "decode.d4.loss_dice": 2.18133, "decode.d5.loss_cls": 0.36429, "decode.d5.loss_mask": 1.61885, "decode.d5.loss_dice": 2.19115, "decode.d6.loss_cls": 0.32648, "decode.d6.loss_mask": 1.61568, "decode.d6.loss_dice": 2.21871, "decode.d7.loss_cls": 0.37141, "decode.d7.loss_mask": 1.61855, "decode.d7.loss_dice": 2.21036, "decode.d8.loss_cls": 0.4478, "decode.d8.loss_mask": 1.60806, "decode.d8.loss_dice": 2.20349, "loss": 44.03306, "grad_norm": 176.40196, "time": 0.7191}
{"mode": "train", "epoch": 6, "iter": 350, "lr": 0.0, "memory": 6584, "data_time": 0.04931, "decode.loss_cls": 0.32903, "decode.loss_mask": 1.6319, "decode.loss_dice": 2.14122, "decode.d0.loss_cls": 2.09722, "decode.d0.loss_mask": 1.68575, "decode.d0.loss_dice": 2.18762, "decode.d1.loss_cls": 0.40155, "decode.d1.loss_mask": 1.62415, "decode.d1.loss_dice": 2.14498, "decode.d2.loss_cls": 0.26991, "decode.d2.loss_mask": 1.62791, "decode.d2.loss_dice": 2.13071, "decode.d3.loss_cls": 0.20025, "decode.d3.loss_mask": 1.63186, "decode.d3.loss_dice": 2.11991, "decode.d4.loss_cls": 0.18351, "decode.d4.loss_mask": 1.63349, "decode.d4.loss_dice": 2.12604, "decode.d5.loss_cls": 0.17478, "decode.d5.loss_mask": 1.65002, "decode.d5.loss_dice": 2.11282, "decode.d6.loss_cls": 0.15283, "decode.d6.loss_mask": 1.63294, "decode.d6.loss_dice": 2.1458, "decode.d7.loss_cls": 0.20031, "decode.d7.loss_mask": 1.63604, "decode.d7.loss_dice": 2.13682, "decode.d8.loss_cls": 0.23809, "decode.d8.loss_mask": 1.63943, "decode.d8.loss_dice": 2.13205, "loss": 42.01894, "grad_norm": 186.15111, "time": 0.73446}
{"mode": "train", "epoch": 7, "iter": 400, "lr": 0.0, "memory": 6584, "data_time": 0.04715, "decode.loss_cls": 0.16877, "decode.loss_mask": 1.59954, "decode.loss_dice": 2.0936, "decode.d0.loss_cls": 2.09696, "decode.d0.loss_mask": 1.61063, "decode.d0.loss_dice": 2.14803, "decode.d1.loss_cls": 0.34073, "decode.d1.loss_mask": 1.59435, "decode.d1.loss_dice": 2.10272, "decode.d2.loss_cls": 0.19859, "decode.d2.loss_mask": 1.59117, "decode.d2.loss_dice": 2.09074, "decode.d3.loss_cls": 0.13113, "decode.d3.loss_mask": 1.60509, "decode.d3.loss_dice": 2.07249, "decode.d4.loss_cls": 0.11152, "decode.d4.loss_mask": 1.60043, "decode.d4.loss_dice": 2.08695, "decode.d5.loss_cls": 0.1037, "decode.d5.loss_mask": 1.62371, "decode.d5.loss_dice": 2.06573, "decode.d6.loss_cls": 0.07901, "decode.d6.loss_mask": 1.60356, "decode.d6.loss_dice": 2.08987, "decode.d7.loss_cls": 0.09867, "decode.d7.loss_mask": 1.60941, "decode.d7.loss_dice": 2.09158, "decode.d8.loss_cls": 0.10964, "decode.d8.loss_mask": 1.609, "decode.d8.loss_dice": 2.09197, "loss": 40.41929, "grad_norm": 219.1196, "time": 0.73794}
{"mode": "train", "epoch": 7, "iter": 450, "lr": 0.0, "memory": 6584, "data_time": 0.00423, "decode.loss_cls": 0.09807, "decode.loss_mask": 1.59498, "decode.loss_dice": 1.99093, "decode.d0.loss_cls": 2.09587, "decode.d0.loss_mask": 1.60291, "decode.d0.loss_dice": 2.07995, "decode.d1.loss_cls": 0.29325, "decode.d1.loss_mask": 1.58759, "decode.d1.loss_dice": 2.01551, "decode.d2.loss_cls": 0.15358, "decode.d2.loss_mask": 1.58292, "decode.d2.loss_dice": 2.00437, "decode.d3.loss_cls": 0.09402, "decode.d3.loss_mask": 1.60226, "decode.d3.loss_dice": 1.98628, "decode.d4.loss_cls": 0.07538, "decode.d4.loss_mask": 1.58812, "decode.d4.loss_dice": 1.99046, "decode.d5.loss_cls": 0.06787, "decode.d5.loss_mask": 1.6088, "decode.d5.loss_dice": 1.97353, "decode.d6.loss_cls": 0.04948, "decode.d6.loss_mask": 1.59495, "decode.d6.loss_dice": 2.00014, "decode.d7.loss_cls": 0.06201, "decode.d7.loss_mask": 1.59111, "decode.d7.loss_dice": 2.0001, "decode.d8.loss_cls": 0.0646, "decode.d8.loss_mask": 1.60087, "decode.d8.loss_dice": 1.99108, "loss": 39.04098, "grad_norm": 259.50947, "time": 0.68553}
{"mode": "train", "epoch": 8, "iter": 500, "lr": 0.0, "memory": 6584, "data_time": 0.04738, "decode.loss_cls": 0.06749, "decode.loss_mask": 1.60589, "decode.loss_dice": 1.98841, "decode.d0.loss_cls": 2.09478, "decode.d0.loss_mask": 1.62396, "decode.d0.loss_dice": 2.07618, "decode.d1.loss_cls": 0.25999, "decode.d1.loss_mask": 1.60537, "decode.d1.loss_dice": 2.01879, "decode.d2.loss_cls": 0.12504, "decode.d2.loss_mask": 1.61232, "decode.d2.loss_dice": 2.00279, "decode.d3.loss_cls": 0.07326, "decode.d3.loss_mask": 1.62156, "decode.d3.loss_dice": 1.9905, "decode.d4.loss_cls": 0.05709, "decode.d4.loss_mask": 1.61497, "decode.d4.loss_dice": 1.99571, "decode.d5.loss_cls": 0.05154, "decode.d5.loss_mask": 1.63088, "decode.d5.loss_dice": 1.9847, "decode.d6.loss_cls": 0.03626, "decode.d6.loss_mask": 1.61575, "decode.d6.loss_dice": 1.99547, "decode.d7.loss_cls": 0.04601, "decode.d7.loss_mask": 1.61577, "decode.d7.loss_dice": 1.99232, "decode.d8.loss_cls": 0.04552, "decode.d8.loss_mask": 1.61115, "decode.d8.loss_dice": 1.99605, "loss": 39.05552, "grad_norm": 294.03908, "time": 0.72202}
{"mode": "train", "epoch": 9, "iter": 550, "lr": 0.0, "memory": 6584, "data_time": 0.04742, "decode.loss_cls": 0.05152, "decode.loss_mask": 1.5569, "decode.loss_dice": 1.88975, "decode.d0.loss_cls": 2.09616, "decode.d0.loss_mask": 1.58538, "decode.d0.loss_dice": 1.99588, "decode.d1.loss_cls": 0.23136, "decode.d1.loss_mask": 1.56605, "decode.d1.loss_dice": 1.92221, "decode.d2.loss_cls": 0.10579, "decode.d2.loss_mask": 1.56086, "decode.d2.loss_dice": 1.89834, "decode.d3.loss_cls": 0.06203, "decode.d3.loss_mask": 1.56515, "decode.d3.loss_dice": 1.89163, "decode.d4.loss_cls": 0.04718, "decode.d4.loss_mask": 1.56049, "decode.d4.loss_dice": 1.89693, "decode.d5.loss_cls": 0.04323, "decode.d5.loss_mask": 1.57979, "decode.d5.loss_dice": 1.87401, "decode.d6.loss_cls": 0.02936, "decode.d6.loss_mask": 1.56397, "decode.d6.loss_dice": 1.89474, "decode.d7.loss_cls": 0.03651, "decode.d7.loss_mask": 1.56046, "decode.d7.loss_dice": 1.8921, "decode.d8.loss_cls": 0.03522, "decode.d8.loss_mask": 1.5542, "decode.d8.loss_dice": 1.88895, "loss": 37.43616, "grad_norm": 353.64295, "time": 0.73122}
{"mode": "train", "epoch": 10, "iter": 600, "lr": 0.0, "memory": 6584, "data_time": 0.04854, "decode.loss_cls": 0.05043, "decode.loss_mask": 1.50852, "decode.loss_dice": 1.83159, "decode.d0.loss_cls": 2.09303, "decode.d0.loss_mask": 1.55559, "decode.d0.loss_dice": 1.96265, "decode.d1.loss_cls": 0.21276, "decode.d1.loss_mask": 1.51852, "decode.d1.loss_dice": 1.87207, "decode.d2.loss_cls": 0.09816, "decode.d2.loss_mask": 1.51977, "decode.d2.loss_dice": 1.84089, "decode.d3.loss_cls": 0.05951, "decode.d3.loss_mask": 1.52511, "decode.d3.loss_dice": 1.84272, "decode.d4.loss_cls": 0.04687, "decode.d4.loss_mask": 1.51685, "decode.d4.loss_dice": 1.83926, "decode.d5.loss_cls": 0.04451, "decode.d5.loss_mask": 1.53013, "decode.d5.loss_dice": 1.8249, "decode.d6.loss_cls": 0.03563, "decode.d6.loss_mask": 1.51121, "decode.d6.loss_dice": 1.83981, "decode.d7.loss_cls": 0.04166, "decode.d7.loss_mask": 1.51909, "decode.d7.loss_dice": 1.84159, "decode.d8.loss_cls": 0.03961, "decode.d8.loss_mask": 1.51944, "decode.d8.loss_dice": 1.83723, "loss": 36.47913, "grad_norm": 348.0331, "time": 0.73545}
{"mode": "train", "epoch": 10, "iter": 650, "lr": 0.0, "memory": 6584, "data_time": 0.00438, "decode.loss_cls": 0.03703, "decode.loss_mask": 1.46584, "decode.loss_dice": 1.84692, "decode.d0.loss_cls": 2.09131, "decode.d0.loss_mask": 1.50416, "decode.d0.loss_dice": 1.96413, "decode.d1.loss_cls": 0.19112, "decode.d1.loss_mask": 1.48134, "decode.d1.loss_dice": 1.87471, "decode.d2.loss_cls": 0.08112, "decode.d2.loss_mask": 1.49067, "decode.d2.loss_dice": 1.84793, "decode.d3.loss_cls": 0.04575, "decode.d3.loss_mask": 1.49635, "decode.d3.loss_dice": 1.84529, "decode.d4.loss_cls": 0.03441, "decode.d4.loss_mask": 1.48986, "decode.d4.loss_dice": 1.84444, "decode.d5.loss_cls": 0.03278, "decode.d5.loss_mask": 1.51031, "decode.d5.loss_dice": 1.82794, "decode.d6.loss_cls": 0.02323, "decode.d6.loss_mask": 1.48825, "decode.d6.loss_dice": 1.84318, "decode.d7.loss_cls": 0.02825, "decode.d7.loss_mask": 1.48431, "decode.d7.loss_dice": 1.84071, "decode.d8.loss_cls": 0.02724, "decode.d8.loss_mask": 1.47618, "decode.d8.loss_dice": 1.84506, "loss": 36.05982, "grad_norm": 396.05392, "time": 0.68645}
{"mode": "train", "epoch": 11, "iter": 700, "lr": 0.0, "memory": 6584, "data_time": 0.04998, "decode.loss_cls": 0.02895, "decode.loss_mask": 1.48785, "decode.loss_dice": 1.78014, "decode.d0.loss_cls": 2.0901, "decode.d0.loss_mask": 1.52388, "decode.d0.loss_dice": 1.9196, "decode.d1.loss_cls": 0.17477, "decode.d1.loss_mask": 1.49454, "decode.d1.loss_dice": 1.82133, "decode.d2.loss_cls": 0.07027, "decode.d2.loss_mask": 1.50279, "decode.d2.loss_dice": 1.79303, "decode.d3.loss_cls": 0.03896, "decode.d3.loss_mask": 1.49096, "decode.d3.loss_dice": 1.79499, "decode.d4.loss_cls": 0.02863, "decode.d4.loss_mask": 1.48311, "decode.d4.loss_dice": 1.79379, "decode.d5.loss_cls": 0.02762, "decode.d5.loss_mask": 1.50054, "decode.d5.loss_dice": 1.77555, "decode.d6.loss_cls": 0.01942, "decode.d6.loss_mask": 1.48913, "decode.d6.loss_dice": 1.77932, "decode.d7.loss_cls": 0.02373, "decode.d7.loss_mask": 1.48353, "decode.d7.loss_dice": 1.78066, "decode.d8.loss_cls": 0.02134, "decode.d8.loss_mask": 1.49274, "decode.d8.loss_dice": 1.77466, "loss": 35.48593, "grad_norm": 435.36356, "time": 0.72678}
{"mode": "train", "epoch": 12, "iter": 750, "lr": 0.0, "memory": 6584, "data_time": 0.04999, "decode.loss_cls": 0.02416, "decode.loss_mask": 1.41557, "decode.loss_dice": 1.70814, "decode.d0.loss_cls": 2.08965, "decode.d0.loss_mask": 1.47471, "decode.d0.loss_dice": 1.84832, "decode.d1.loss_cls": 0.15927, "decode.d1.loss_mask": 1.43703, "decode.d1.loss_dice": 1.74502, "decode.d2.loss_cls": 0.06166, "decode.d2.loss_mask": 1.43659, "decode.d2.loss_dice": 1.71218, "decode.d3.loss_cls": 0.03483, "decode.d3.loss_mask": 1.42782, "decode.d3.loss_dice": 1.72288, "decode.d4.loss_cls": 0.02567, "decode.d4.loss_mask": 1.4264, "decode.d4.loss_dice": 1.7154, "decode.d5.loss_cls": 0.02392, "decode.d5.loss_mask": 1.43422, "decode.d5.loss_dice": 1.69822, "decode.d6.loss_cls": 0.01741, "decode.d6.loss_mask": 1.42356, "decode.d6.loss_dice": 1.71224, "decode.d7.loss_cls": 0.0208, "decode.d7.loss_mask": 1.41709, "decode.d7.loss_dice": 1.70763, "decode.d8.loss_cls": 0.01896, "decode.d8.loss_mask": 1.42001, "decode.d8.loss_dice": 1.70263, "loss": 34.062, "grad_norm": 523.10921, "time": 0.73728}
{"mode": "train", "epoch": 13, "iter": 800, "lr": 0.0, "memory": 6584, "data_time": 0.04844, "decode.loss_cls": 0.02398, "decode.loss_mask": 1.37118, "decode.loss_dice": 1.74257, "decode.d0.loss_cls": 2.08589, "decode.d0.loss_mask": 1.42162, "decode.d0.loss_dice": 1.88267, "decode.d1.loss_cls": 0.14682, "decode.d1.loss_mask": 1.40256, "decode.d1.loss_dice": 1.78354, "decode.d2.loss_cls": 0.05502, "decode.d2.loss_mask": 1.41262, "decode.d2.loss_dice": 1.75622, "decode.d3.loss_cls": 0.03092, "decode.d3.loss_mask": 1.40685, "decode.d3.loss_dice": 1.75761, "decode.d4.loss_cls": 0.02498, "decode.d4.loss_mask": 1.39822, "decode.d4.loss_dice": 1.74952, "decode.d5.loss_cls": 0.02358, "decode.d5.loss_mask": 1.40392, "decode.d5.loss_dice": 1.73847, "decode.d6.loss_cls": 0.0171, "decode.d6.loss_mask": 1.3947, "decode.d6.loss_dice": 1.74824, "decode.d7.loss_cls": 0.02094, "decode.d7.loss_mask": 1.38653, "decode.d7.loss_dice": 1.75064, "decode.d8.loss_cls": 0.01944, "decode.d8.loss_mask": 1.38263, "decode.d8.loss_dice": 1.74267, "loss": 34.08166, "grad_norm": 525.9827, "time": 0.73935}
{"mode": "train", "epoch": 13, "iter": 850, "lr": 0.0, "memory": 6584, "data_time": 0.00441, "decode.loss_cls": 0.03244, "decode.loss_mask": 1.36271, "decode.loss_dice": 1.6329, "decode.d0.loss_cls": 2.08664, "decode.d0.loss_mask": 1.42514, "decode.d0.loss_dice": 1.78396, "decode.d1.loss_cls": 0.14147, "decode.d1.loss_mask": 1.39085, "decode.d1.loss_dice": 1.67834, "decode.d2.loss_cls": 0.05728, "decode.d2.loss_mask": 1.40294, "decode.d2.loss_dice": 1.64578, "decode.d3.loss_cls": 0.03576, "decode.d3.loss_mask": 1.38832, "decode.d3.loss_dice": 1.65478, "decode.d4.loss_cls": 0.0312, "decode.d4.loss_mask": 1.3713, "decode.d4.loss_dice": 1.64829, "decode.d5.loss_cls": 0.03031, "decode.d5.loss_mask": 1.37592, "decode.d5.loss_dice": 1.62752, "decode.d6.loss_cls": 0.02668, "decode.d6.loss_mask": 1.36133, "decode.d6.loss_dice": 1.64361, "decode.d7.loss_cls": 0.03026, "decode.d7.loss_mask": 1.36448, "decode.d7.loss_dice": 1.63748, "decode.d8.loss_cls": 0.02862, "decode.d8.loss_mask": 1.36218, "decode.d8.loss_dice": 1.63086, "loss": 32.88936, "grad_norm": 497.2815, "time": 0.69197}
{"mode": "train", "epoch": 14, "iter": 900, "lr": 0.0, "memory": 6584, "data_time": 0.04674, "decode.loss_cls": 0.03083, "decode.loss_mask": 1.32352, "decode.loss_dice": 1.60617, "decode.d0.loss_cls": 2.08662, "decode.d0.loss_mask": 1.39486, "decode.d0.loss_dice": 1.77005, "decode.d1.loss_cls": 0.13046, "decode.d1.loss_mask": 1.36446, "decode.d1.loss_dice": 1.65425, "decode.d2.loss_cls": 0.05229, "decode.d2.loss_mask": 1.36344, "decode.d2.loss_dice": 1.62085, "decode.d3.loss_cls": 0.03384, "decode.d3.loss_mask": 1.35788, "decode.d3.loss_dice": 1.62396, "decode.d4.loss_cls": 0.02857, "decode.d4.loss_mask": 1.33986, "decode.d4.loss_dice": 1.6132, "decode.d5.loss_cls": 0.03021, "decode.d5.loss_mask": 1.34273, "decode.d5.loss_dice": 1.60176, "decode.d6.loss_cls": 0.02559, "decode.d6.loss_mask": 1.34393, "decode.d6.loss_dice": 1.60028, "decode.d7.loss_cls": 0.02898, "decode.d7.loss_mask": 1.3337, "decode.d7.loss_dice": 1.60324, "decode.d8.loss_cls": 0.02791, "decode.d8.loss_mask": 1.32712, "decode.d8.loss_dice": 1.59881, "loss": 32.2594, "grad_norm": 497.70605, "time": 0.72569}
{"mode": "train", "epoch": 15, "iter": 950, "lr": 0.0, "memory": 6584, "data_time": 0.04761, "decode.loss_cls": 0.04136, "decode.loss_mask": 1.36955, "decode.loss_dice": 1.60353, "decode.d0.loss_cls": 2.08405, "decode.d0.loss_mask": 1.40287, "decode.d0.loss_dice": 1.74907, "decode.d1.loss_cls": 0.12396, "decode.d1.loss_mask": 1.39585, "decode.d1.loss_dice": 1.6361, "decode.d2.loss_cls": 0.05315, "decode.d2.loss_mask": 1.39813, "decode.d2.loss_dice": 1.61438, "decode.d3.loss_cls": 0.04217, "decode.d3.loss_mask": 1.37957, "decode.d3.loss_dice": 1.62219, "decode.d4.loss_cls": 0.03786, "decode.d4.loss_mask": 1.3707, "decode.d4.loss_dice": 1.62038, "decode.d5.loss_cls": 0.03304, "decode.d5.loss_mask": 1.3824, "decode.d5.loss_dice": 1.60562, "decode.d6.loss_cls": 0.03521, "decode.d6.loss_mask": 1.36928, "decode.d6.loss_dice": 1.60113, "decode.d7.loss_cls": 0.03789, "decode.d7.loss_mask": 1.35983, "decode.d7.loss_dice": 1.60051, "decode.d8.loss_cls": 0.03649, "decode.d8.loss_mask": 1.36922, "decode.d8.loss_dice": 1.60171, "loss": 32.57722, "grad_norm": 634.52995, "time": 0.73437}
{"mode": "train", "epoch": 16, "iter": 1000, "lr": 0.0, "memory": 6584, "data_time": 0.04581, "decode.loss_cls": 0.01602, "decode.loss_mask": 1.33194, "decode.loss_dice": 1.60759, "decode.d0.loss_cls": 2.08085, "decode.d0.loss_mask": 1.35058, "decode.d0.loss_dice": 1.74543, "decode.d1.loss_cls": 0.10581, "decode.d1.loss_mask": 1.34268, "decode.d1.loss_dice": 1.64641, "decode.d2.loss_cls": 0.03658, "decode.d2.loss_mask": 1.34887, "decode.d2.loss_dice": 1.61705, "decode.d3.loss_cls": 0.02073, "decode.d3.loss_mask": 1.34209, "decode.d3.loss_dice": 1.61931, "decode.d4.loss_cls": 0.01658, "decode.d4.loss_mask": 1.33238, "decode.d4.loss_dice": 1.61618, "decode.d5.loss_cls": 0.01558, "decode.d5.loss_mask": 1.34753, "decode.d5.loss_dice": 1.59432, "decode.d6.loss_cls": 0.01226, "decode.d6.loss_mask": 1.33178, "decode.d6.loss_dice": 1.60397, "decode.d7.loss_cls": 0.01519, "decode.d7.loss_mask": 1.33556, "decode.d7.loss_dice": 1.60225, "decode.d8.loss_cls": 0.01322, "decode.d8.loss_mask": 1.33357, "decode.d8.loss_dice": 1.60126, "loss": 31.98359, "grad_norm": 595.03473, "time": 0.78488}
{"mode": "train", "epoch": 16, "iter": 1050, "lr": 0.0, "memory": 6584, "data_time": 0.00453, "decode.loss_cls": 0.02911, "decode.loss_mask": 1.24372, "decode.loss_dice": 1.46739, "decode.d0.loss_cls": 2.0809, "decode.d0.loss_mask": 1.29471, "decode.d0.loss_dice": 1.64049, "decode.d1.loss_cls": 0.10464, "decode.d1.loss_mask": 1.26739, "decode.d1.loss_dice": 1.52236, "decode.d2.loss_cls": 0.04241, "decode.d2.loss_mask": 1.26609, "decode.d2.loss_dice": 1.48277, "decode.d3.loss_cls": 0.02924, "decode.d3.loss_mask": 1.2551, "decode.d3.loss_dice": 1.48304, "decode.d4.loss_cls": 0.02748, "decode.d4.loss_mask": 1.24619, "decode.d4.loss_dice": 1.47918, "decode.d5.loss_cls": 0.02671, "decode.d5.loss_mask": 1.25338, "decode.d5.loss_dice": 1.46675, "decode.d6.loss_cls": 0.02366, "decode.d6.loss_mask": 1.25198, "decode.d6.loss_dice": 1.46233, "decode.d7.loss_cls": 0.02734, "decode.d7.loss_mask": 1.25026, "decode.d7.loss_dice": 1.46003, "decode.d8.loss_cls": 0.02602, "decode.d8.loss_mask": 1.23668, "decode.d8.loss_dice": 1.46431, "loss": 29.91166, "grad_norm": 598.2428, "time": 0.69883}
{"mode": "train", "epoch": 17, "iter": 1100, "lr": 0.0, "memory": 6584, "data_time": 0.04678, "decode.loss_cls": 0.02705, "decode.loss_mask": 1.25722, "decode.loss_dice": 1.47146, "decode.d0.loss_cls": 2.08134, "decode.d0.loss_mask": 1.30167, "decode.d0.loss_dice": 1.6469, "decode.d1.loss_cls": 0.10113, "decode.d1.loss_mask": 1.29359, "decode.d1.loss_dice": 1.51956, "decode.d2.loss_cls": 0.04436, "decode.d2.loss_mask": 1.28064, "decode.d2.loss_dice": 1.48355, "decode.d3.loss_cls": 0.03253, "decode.d3.loss_mask": 1.26588, "decode.d3.loss_dice": 1.49106, "decode.d4.loss_cls": 0.02116, "decode.d4.loss_mask": 1.26316, "decode.d4.loss_dice": 1.47355, "decode.d5.loss_cls": 0.026, "decode.d5.loss_mask": 1.27205, "decode.d5.loss_dice": 1.45979, "decode.d6.loss_cls": 0.0237, "decode.d6.loss_mask": 1.26212, "decode.d6.loss_dice": 1.46108, "decode.d7.loss_cls": 0.03235, "decode.d7.loss_mask": 1.24739, "decode.d7.loss_dice": 1.46354, "decode.d8.loss_cls": 0.0255, "decode.d8.loss_mask": 1.25002, "decode.d8.loss_dice": 1.4622, "loss": 30.04157, "grad_norm": 591.72208, "time": 0.7289}
{"mode": "train", "epoch": 18, "iter": 1150, "lr": 0.0, "memory": 6584, "data_time": 0.04693, "decode.loss_cls": 0.02217, "decode.loss_mask": 1.27429, "decode.loss_dice": 1.50524, "decode.d0.loss_cls": 2.07612, "decode.d0.loss_mask": 1.30542, "decode.d0.loss_dice": 1.64922, "decode.d1.loss_cls": 0.0903, "decode.d1.loss_mask": 1.31743, "decode.d1.loss_dice": 1.53969, "decode.d2.loss_cls": 0.03681, "decode.d2.loss_mask": 1.30008, "decode.d2.loss_dice": 1.52144, "decode.d3.loss_cls": 0.02676, "decode.d3.loss_mask": 1.29376, "decode.d3.loss_dice": 1.52103, "decode.d4.loss_cls": 0.02489, "decode.d4.loss_mask": 1.28985, "decode.d4.loss_dice": 1.50783, "decode.d5.loss_cls": 0.02366, "decode.d5.loss_mask": 1.28593, "decode.d5.loss_dice": 1.50586, "decode.d6.loss_cls": 0.02128, "decode.d6.loss_mask": 1.28091, "decode.d6.loss_dice": 1.50432, "decode.d7.loss_cls": 0.02414, "decode.d7.loss_mask": 1.28359, "decode.d7.loss_dice": 1.50482, "decode.d8.loss_cls": 0.02238, "decode.d8.loss_mask": 1.27611, "decode.d8.loss_dice": 1.50187, "loss": 30.53719, "grad_norm": 623.92649, "time": 0.72935}
{"mode": "train", "epoch": 19, "iter": 1200, "lr": 0.0, "memory": 6584, "data_time": 0.04879, "decode.loss_cls": 0.01384, "decode.loss_mask": 1.2473, "decode.loss_dice": 1.42268, "decode.d0.loss_cls": 2.07434, "decode.d0.loss_mask": 1.28471, "decode.d0.loss_dice": 1.58725, "decode.d1.loss_cls": 0.07686, "decode.d1.loss_mask": 1.27845, "decode.d1.loss_dice": 1.47689, "decode.d2.loss_cls": 0.02581, "decode.d2.loss_mask": 1.25564, "decode.d2.loss_dice": 1.44015, "decode.d3.loss_cls": 0.01554, "decode.d3.loss_mask": 1.24452, "decode.d3.loss_dice": 1.44681, "decode.d4.loss_cls": 0.01347, "decode.d4.loss_mask": 1.24026, "decode.d4.loss_dice": 1.43689, "decode.d5.loss_cls": 0.01375, "decode.d5.loss_mask": 1.23705, "decode.d5.loss_dice": 1.42544, "decode.d6.loss_cls": 0.01092, "decode.d6.loss_mask": 1.24145, "decode.d6.loss_dice": 1.42557, "decode.d7.loss_cls": 0.01427, "decode.d7.loss_mask": 1.23882, "decode.d7.loss_dice": 1.42462, "decode.d8.loss_cls": 0.01181, "decode.d8.loss_mask": 1.25239, "decode.d8.loss_dice": 1.41846, "loss": 29.29594, "grad_norm": 507.19646, "time": 0.73869}
{"mode": "train", "epoch": 19, "iter": 1250, "lr": 0.0, "memory": 6584, "data_time": 0.00463, "decode.loss_cls": 0.01331, "decode.loss_mask": 1.26049, "decode.loss_dice": 1.45031, "decode.d0.loss_cls": 2.07161, "decode.d0.loss_mask": 1.29942, "decode.d0.loss_dice": 1.5846, "decode.d1.loss_cls": 0.07098, "decode.d1.loss_mask": 1.30001, "decode.d1.loss_dice": 1.48572, "decode.d2.loss_cls": 0.02374, "decode.d2.loss_mask": 1.27295, "decode.d2.loss_dice": 1.45772, "decode.d3.loss_cls": 0.01448, "decode.d3.loss_mask": 1.27272, "decode.d3.loss_dice": 1.45798, "decode.d4.loss_cls": 0.01247, "decode.d4.loss_mask": 1.27241, "decode.d4.loss_dice": 1.44435, "decode.d5.loss_cls": 0.01237, "decode.d5.loss_mask": 1.27334, "decode.d5.loss_dice": 1.44003, "decode.d6.loss_cls": 0.01066, "decode.d6.loss_mask": 1.27305, "decode.d6.loss_dice": 1.44625, "decode.d7.loss_cls": 0.01323, "decode.d7.loss_mask": 1.26003, "decode.d7.loss_dice": 1.44949, "decode.d8.loss_cls": 0.0124, "decode.d8.loss_mask": 1.26506, "decode.d8.loss_dice": 1.44168, "loss": 29.66287, "grad_norm": 598.16622, "time": 0.70454}
{"mode": "train", "epoch": 20, "iter": 1300, "lr": 0.0, "memory": 6584, "data_time": 0.04652, "decode.loss_cls": 0.00966, "decode.loss_mask": 1.18561, "decode.loss_dice": 1.3655, "decode.d0.loss_cls": 2.06659, "decode.d0.loss_mask": 1.24406, "decode.d0.loss_dice": 1.52384, "decode.d1.loss_cls": 0.06454, "decode.d1.loss_mask": 1.22792, "decode.d1.loss_dice": 1.41696, "decode.d2.loss_cls": 0.02024, "decode.d2.loss_mask": 1.2013, "decode.d2.loss_dice": 1.38323, "decode.d3.loss_cls": 0.01195, "decode.d3.loss_mask": 1.19656, "decode.d3.loss_dice": 1.38181, "decode.d4.loss_cls": 0.0104, "decode.d4.loss_mask": 1.19457, "decode.d4.loss_dice": 1.37081, "decode.d5.loss_cls": 0.01035, "decode.d5.loss_mask": 1.19782, "decode.d5.loss_dice": 1.35893, "decode.d6.loss_cls": 0.00754, "decode.d6.loss_mask": 1.19319, "decode.d6.loss_dice": 1.35485, "decode.d7.loss_cls": 0.00998, "decode.d7.loss_mask": 1.19249, "decode.d7.loss_dice": 1.36191, "decode.d8.loss_cls": 0.00882, "decode.d8.loss_mask": 1.1858, "decode.d8.loss_dice": 1.36124, "loss": 28.11849, "grad_norm": 630.91726, "time": 0.73431}
{"mode": "train", "epoch": 21, "iter": 1350, "lr": 0.0, "memory": 6584, "data_time": 0.04769, "decode.loss_cls": 0.01213, "decode.loss_mask": 1.19899, "decode.loss_dice": 1.39849, "decode.d0.loss_cls": 2.06689, "decode.d0.loss_mask": 1.20805, "decode.d0.loss_dice": 1.53484, "decode.d1.loss_cls": 0.06206, "decode.d1.loss_mask": 1.20083, "decode.d1.loss_dice": 1.43494, "decode.d2.loss_cls": 0.02078, "decode.d2.loss_mask": 1.17672, "decode.d2.loss_dice": 1.39817, "decode.d3.loss_cls": 0.01316, "decode.d3.loss_mask": 1.17593, "decode.d3.loss_dice": 1.40184, "decode.d4.loss_cls": 0.0117, "decode.d4.loss_mask": 1.18086, "decode.d4.loss_dice": 1.39343, "decode.d5.loss_cls": 0.01196, "decode.d5.loss_mask": 1.18442, "decode.d5.loss_dice": 1.39056, "decode.d6.loss_cls": 0.00955, "decode.d6.loss_mask": 1.18496, "decode.d6.loss_dice": 1.39396, "decode.d7.loss_cls": 0.01232, "decode.d7.loss_mask": 1.18824, "decode.d7.loss_dice": 1.39398, "decode.d8.loss_cls": 0.01082, "decode.d8.loss_mask": 1.19451, "decode.d8.loss_dice": 1.39784, "loss": 28.26293, "grad_norm": 556.66963, "time": 0.73091}
{"mode": "train", "epoch": 22, "iter": 1400, "lr": 0.0, "memory": 6584, "data_time": 0.04814, "decode.loss_cls": 0.02115, "decode.loss_mask": 1.13565, "decode.loss_dice": 1.34543, "decode.d0.loss_cls": 2.06402, "decode.d0.loss_mask": 1.2179, "decode.d0.loss_dice": 1.51332, "decode.d1.loss_cls": 0.06509, "decode.d1.loss_mask": 1.19773, "decode.d1.loss_dice": 1.39451, "decode.d2.loss_cls": 0.02862, "decode.d2.loss_mask": 1.15391, "decode.d2.loss_dice": 1.36173, "decode.d3.loss_cls": 0.02318, "decode.d3.loss_mask": 1.15137, "decode.d3.loss_dice": 1.3537, "decode.d4.loss_cls": 0.02194, "decode.d4.loss_mask": 1.14272, "decode.d4.loss_dice": 1.34399, "decode.d5.loss_cls": 0.0217, "decode.d5.loss_mask": 1.14052, "decode.d5.loss_dice": 1.34386, "decode.d6.loss_cls": 0.02009, "decode.d6.loss_mask": 1.1354, "decode.d6.loss_dice": 1.34508, "decode.d7.loss_cls": 0.02193, "decode.d7.loss_mask": 1.13309, "decode.d7.loss_dice": 1.3407, "decode.d8.loss_cls": 0.02133, "decode.d8.loss_mask": 1.13438, "decode.d8.loss_dice": 1.33917, "loss": 27.53321, "grad_norm": 570.6123, "time": 0.74358}
{"mode": "train", "epoch": 22, "iter": 1450, "lr": 0.0, "memory": 6584, "data_time": 0.00456, "decode.loss_cls": 0.01333, "decode.loss_mask": 1.23471, "decode.loss_dice": 1.41481, "decode.d0.loss_cls": 2.06048, "decode.d0.loss_mask": 1.27641, "decode.d0.loss_dice": 1.53111, "decode.d1.loss_cls": 0.05345, "decode.d1.loss_mask": 1.25227, "decode.d1.loss_dice": 1.43653, "decode.d2.loss_cls": 0.01833, "decode.d2.loss_mask": 1.225, "decode.d2.loss_dice": 1.40791, "decode.d3.loss_cls": 0.01197, "decode.d3.loss_mask": 1.22481, "decode.d3.loss_dice": 1.40333, "decode.d4.loss_cls": 0.01198, "decode.d4.loss_mask": 1.22494, "decode.d4.loss_dice": 1.40785, "decode.d5.loss_cls": 0.0122, "decode.d5.loss_mask": 1.22657, "decode.d5.loss_dice": 1.394, "decode.d6.loss_cls": 0.01042, "decode.d6.loss_mask": 1.23593, "decode.d6.loss_dice": 1.40406, "decode.d7.loss_cls": 0.01348, "decode.d7.loss_mask": 1.24028, "decode.d7.loss_dice": 1.40338, "decode.d8.loss_cls": 0.01233, "decode.d8.loss_mask": 1.23354, "decode.d8.loss_dice": 1.40293, "loss": 28.79834, "grad_norm": 606.79486, "time": 0.69165}
{"mode": "train", "epoch": 23, "iter": 1500, "lr": 0.0, "memory": 6584, "data_time": 0.04596, "decode.loss_cls": 0.00685, "decode.loss_mask": 1.13181, "decode.loss_dice": 1.33302, "decode.d0.loss_cls": 2.0562, "decode.d0.loss_mask": 1.15702, "decode.d0.loss_dice": 1.47239, "decode.d1.loss_cls": 0.04956, "decode.d1.loss_mask": 1.1455, "decode.d1.loss_dice": 1.38717, "decode.d2.loss_cls": 0.01632, "decode.d2.loss_mask": 1.13488, "decode.d2.loss_dice": 1.34011, "decode.d3.loss_cls": 0.00978, "decode.d3.loss_mask": 1.13789, "decode.d3.loss_dice": 1.33626, "decode.d4.loss_cls": 0.00941, "decode.d4.loss_mask": 1.13277, "decode.d4.loss_dice": 1.32578, "decode.d5.loss_cls": 0.00901, "decode.d5.loss_mask": 1.1299, "decode.d5.loss_dice": 1.31974, "decode.d6.loss_cls": 0.00694, "decode.d6.loss_mask": 1.13176, "decode.d6.loss_dice": 1.32477, "decode.d7.loss_cls": 0.00805, "decode.d7.loss_mask": 1.12785, "decode.d7.loss_dice": 1.32698, "decode.d8.loss_cls": 0.00721, "decode.d8.loss_mask": 1.12791, "decode.d8.loss_dice": 1.32757, "loss": 27.03042, "grad_norm": 546.28103, "time": 0.73096}
