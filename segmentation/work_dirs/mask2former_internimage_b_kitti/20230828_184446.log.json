{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce GTX 1080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 12.1, V12.1.66\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+cefb275", "seed": 991907044, "exp_name": "mask2former_internimage_b_kitti.py", "mmseg_version": "0.30.0+cefb275", "config": "num_things_classes = 0\nnum_stuff_classes = 2\nnum_classes = 2\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2Former',\n    pretrained=None,\n    backbone=dict(\n        type='InternImage',\n        core_op='DCNv3',\n        channels=112,\n        depths=[4, 4, 21, 4],\n        groups=[7, 14, 28, 56],\n        mlp_ratio=4.0,\n        drop_path_rate=0.4,\n        norm_layer='LN',\n        layer_scale=1.0,\n        offset_scale=1.0,\n        post_norm=True,\n        with_cp=False,\n        out_indices=(0, 1, 2, 3),\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'\n        )),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[112, 224, 448, 896],\n        feat_channels=256,\n        out_channels=256,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=0,\n        num_stuff_classes=2,\n        num_queries=100,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=256,\n                        feedforward_channels=1024,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True),\n                        with_cp=True),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=128, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=128, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=256,\n                    num_heads=8,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=256,\n                    feedforward_channels=2048,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True,\n                    with_cp=True),\n                feedforward_channels=2048,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[1.0, 1.0, 0.1]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(200, 664),\n            stride=(341, 341))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(200, 664),\n        stride=(341, 341)),\n    init_cfg=None)\ndataset_type = 'UPBDataset'\ndata_root = '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation'\nimg_norm_cfg = dict(\n    mean=[89.497, 93.675, 92.645], std=[76.422, 78.611, 80.487], to_rgb=True)\ncrop_size = (200, 664)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='LoadCategory'),\n    dict(type='Resize', img_scale=(664, 200), ratio_range=None),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[89.497, 93.675, 92.645],\n        std=[76.422, 78.611, 80.487],\n        to_rgb=True),\n    dict(type='Pad', size=(200, 664), pad_val=0, seg_pad_val=0),\n    dict(type='ToMask'),\n    dict(type='ToSoft', num_iter=12, kernel_size=(11, 11), std_dev=5),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels', 'category'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(200, 664),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir='self_supervised_labels_30',\n        split='splits/val_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='LoadCategory'),\n            dict(type='Resize', img_scale=(664, 200), ratio_range=None),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='Pad', size=(200, 664), pad_val=0, seg_pad_val=0),\n            dict(type='ToMask'),\n            dict(type='ToSoft', num_iter=12, kernel_size=(11, 11), std_dev=5),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_semantic_seg', 'gt_masks', 'gt_labels',\n                    'category'\n                ])\n        ]),\n    val=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(200, 664),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(200, 664),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=2e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='CustomLayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(\n        num_layers=39,\n        layer_decay_rate=0.94,\n        depths=[5, 5, 24, 5],\n        offset_lr_scale=1.0))\noptimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=160000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)\nevaluation = dict(\n    interval=16000, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'\nwork_dir = 'work_dirs/mask2former_internimage_b_kitti'\ngpu_ids = range(0, 2)\nauto_resume = False\ndevice = 'cuda'\nseed = 991907044\n", "CLASSES": ["rest", "path"], "PALETTE": [[0, 0, 255], [255, 0, 0]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 6584, "data_time": 0.00668, "decode.loss_cls": 1.78773, "decode.loss_mask": 3.51052, "decode.loss_dice": 3.08996, "decode.d0.loss_cls": 2.32293, "decode.d0.loss_mask": 2.38202, "decode.d0.loss_dice": 2.93667, "decode.d1.loss_cls": 1.61833, "decode.d1.loss_mask": 2.77805, "decode.d1.loss_dice": 3.02034, "decode.d2.loss_cls": 1.77895, "decode.d2.loss_mask": 3.01717, "decode.d2.loss_dice": 2.97949, "decode.d3.loss_cls": 1.93185, "decode.d3.loss_mask": 3.22302, "decode.d3.loss_dice": 3.02957, "decode.d4.loss_cls": 1.43613, "decode.d4.loss_mask": 3.34178, "decode.d4.loss_dice": 3.13997, "decode.d5.loss_cls": 1.78902, "decode.d5.loss_mask": 3.41397, "decode.d5.loss_dice": 3.09778, "decode.d6.loss_cls": 1.56512, "decode.d6.loss_mask": 3.44831, "decode.d6.loss_dice": 2.9028, "decode.d7.loss_cls": 1.87199, "decode.d7.loss_mask": 3.53758, "decode.d7.loss_dice": 2.94502, "decode.d8.loss_cls": 1.34833, "decode.d8.loss_mask": 3.49309, "decode.d8.loss_dice": 3.02566, "loss": 79.76316, "grad_norm": 268.50045, "time": 0.72343}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0, "memory": 6584, "data_time": 0.04626, "decode.loss_cls": 1.29563, "decode.loss_mask": 3.51223, "decode.loss_dice": 3.00037, "decode.d0.loss_cls": 2.30649, "decode.d0.loss_mask": 2.11938, "decode.d0.loss_dice": 2.77793, "decode.d1.loss_cls": 1.42342, "decode.d1.loss_mask": 2.19129, "decode.d1.loss_dice": 2.72355, "decode.d2.loss_cls": 1.41851, "decode.d2.loss_mask": 2.50418, "decode.d2.loss_dice": 2.78042, "decode.d3.loss_cls": 1.4535, "decode.d3.loss_mask": 2.96673, "decode.d3.loss_dice": 2.91118, "decode.d4.loss_cls": 1.19682, "decode.d4.loss_mask": 3.09851, "decode.d4.loss_dice": 2.95294, "decode.d5.loss_cls": 1.29219, "decode.d5.loss_mask": 3.26201, "decode.d5.loss_dice": 2.958, "decode.d6.loss_cls": 1.22048, "decode.d6.loss_mask": 3.31589, "decode.d6.loss_dice": 2.83082, "decode.d7.loss_cls": 1.33232, "decode.d7.loss_mask": 3.46539, "decode.d7.loss_dice": 2.94989, "decode.d8.loss_cls": 1.17007, "decode.d8.loss_mask": 3.49381, "decode.d8.loss_dice": 2.9646, "loss": 72.88856, "grad_norm": 182.14189, "time": 0.72999}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.0, "memory": 6584, "data_time": 0.04706, "decode.loss_cls": 1.15375, "decode.loss_mask": 3.29693, "decode.loss_dice": 2.94603, "decode.d0.loss_cls": 2.2605, "decode.d0.loss_mask": 1.58099, "decode.d0.loss_dice": 2.5785, "decode.d1.loss_cls": 1.21664, "decode.d1.loss_mask": 1.32671, "decode.d1.loss_dice": 2.39795, "decode.d2.loss_cls": 1.15955, "decode.d2.loss_mask": 1.41968, "decode.d2.loss_dice": 2.52665, "decode.d3.loss_cls": 1.1675, "decode.d3.loss_mask": 1.99619, "decode.d3.loss_dice": 2.62924, "decode.d4.loss_cls": 1.09536, "decode.d4.loss_mask": 2.14038, "decode.d4.loss_dice": 2.68461, "decode.d5.loss_cls": 1.13288, "decode.d5.loss_mask": 2.21055, "decode.d5.loss_dice": 2.71898, "decode.d6.loss_cls": 1.13177, "decode.d6.loss_mask": 2.57742, "decode.d6.loss_dice": 2.76699, "decode.d7.loss_cls": 1.17882, "decode.d7.loss_mask": 3.03154, "decode.d7.loss_dice": 2.92726, "decode.d8.loss_cls": 1.14955, "decode.d8.loss_mask": 3.1537, "decode.d8.loss_dice": 2.94558, "loss": 62.50219, "grad_norm": 193.72617, "time": 0.74489}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0, "memory": 6584, "data_time": 0.04675, "decode.loss_cls": 1.06986, "decode.loss_mask": 1.84106, "decode.loss_dice": 2.49281, "decode.d0.loss_cls": 2.26026, "decode.d0.loss_mask": 1.40607, "decode.d0.loss_dice": 2.37474, "decode.d1.loss_cls": 1.06104, "decode.d1.loss_mask": 1.31924, "decode.d1.loss_dice": 2.21138, "decode.d2.loss_cls": 0.98248, "decode.d2.loss_mask": 1.1777, "decode.d2.loss_dice": 2.30828, "decode.d3.loss_cls": 1.04469, "decode.d3.loss_mask": 1.23146, "decode.d3.loss_dice": 2.2824, "decode.d4.loss_cls": 0.98005, "decode.d4.loss_mask": 1.18508, "decode.d4.loss_dice": 2.31286, "decode.d5.loss_cls": 0.98816, "decode.d5.loss_mask": 1.23846, "decode.d5.loss_dice": 2.32449, "decode.d6.loss_cls": 0.97997, "decode.d6.loss_mask": 1.27924, "decode.d6.loss_dice": 2.33628, "decode.d7.loss_cls": 1.04663, "decode.d7.loss_mask": 1.42616, "decode.d7.loss_dice": 2.39446, "decode.d8.loss_cls": 1.06059, "decode.d8.loss_mask": 1.61163, "decode.d8.loss_dice": 2.45123, "loss": 48.67874, "grad_norm": 140.23682, "time": 0.74542}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0, "memory": 6584, "data_time": 0.00439, "decode.loss_cls": 0.8111, "decode.loss_mask": 1.49547, "decode.loss_dice": 2.17805, "decode.d0.loss_cls": 2.25902, "decode.d0.loss_mask": 1.62779, "decode.d0.loss_dice": 2.25954, "decode.d1.loss_cls": 0.87957, "decode.d1.loss_mask": 1.58437, "decode.d1.loss_dice": 2.1519, "decode.d2.loss_cls": 0.72181, "decode.d2.loss_mask": 1.46629, "decode.d2.loss_dice": 2.16412, "decode.d3.loss_cls": 0.71301, "decode.d3.loss_mask": 1.48791, "decode.d3.loss_dice": 2.15409, "decode.d4.loss_cls": 0.64423, "decode.d4.loss_mask": 1.46259, "decode.d4.loss_dice": 2.16248, "decode.d5.loss_cls": 0.60812, "decode.d5.loss_mask": 1.54064, "decode.d5.loss_dice": 2.1951, "decode.d6.loss_cls": 0.55481, "decode.d6.loss_mask": 1.50039, "decode.d6.loss_dice": 2.1722, "decode.d7.loss_cls": 0.62522, "decode.d7.loss_mask": 1.46172, "decode.d7.loss_dice": 2.16261, "decode.d8.loss_cls": 0.71087, "decode.d8.loss_mask": 1.48395, "decode.d8.loss_dice": 2.21805, "loss": 45.45703, "grad_norm": 124.70407, "time": 0.70056}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0, "memory": 6584, "data_time": 0.0481, "decode.loss_cls": 0.43762, "decode.loss_mask": 1.56772, "decode.loss_dice": 2.13872, "decode.d0.loss_cls": 2.25811, "decode.d0.loss_mask": 1.63898, "decode.d0.loss_dice": 2.25503, "decode.d1.loss_cls": 0.73943, "decode.d1.loss_mask": 1.5839, "decode.d1.loss_dice": 2.14394, "decode.d2.loss_cls": 0.50455, "decode.d2.loss_mask": 1.55521, "decode.d2.loss_dice": 2.16385, "decode.d3.loss_cls": 0.4237, "decode.d3.loss_mask": 1.5753, "decode.d3.loss_dice": 2.12991, "decode.d4.loss_cls": 0.33516, "decode.d4.loss_mask": 1.56031, "decode.d4.loss_dice": 2.14675, "decode.d5.loss_cls": 0.28474, "decode.d5.loss_mask": 1.55984, "decode.d5.loss_dice": 2.16225, "decode.d6.loss_cls": 0.22417, "decode.d6.loss_mask": 1.57543, "decode.d6.loss_dice": 2.13158, "decode.d7.loss_cls": 0.25134, "decode.d7.loss_mask": 1.57233, "decode.d7.loss_dice": 2.13447, "decode.d8.loss_cls": 0.32797, "decode.d8.loss_mask": 1.55301, "decode.d8.loss_dice": 2.17719, "loss": 43.1125, "grad_norm": 140.29464, "time": 0.73305}
{"mode": "train", "epoch": 6, "iter": 350, "lr": 0.0, "memory": 6584, "data_time": 0.04674, "decode.loss_cls": 0.20697, "decode.loss_mask": 1.61822, "decode.loss_dice": 2.05458, "decode.d0.loss_cls": 2.25573, "decode.d0.loss_mask": 1.64096, "decode.d0.loss_dice": 2.20989, "decode.d1.loss_cls": 0.61879, "decode.d1.loss_mask": 1.59859, "decode.d1.loss_dice": 2.09302, "decode.d2.loss_cls": 0.34809, "decode.d2.loss_mask": 1.60292, "decode.d2.loss_dice": 2.09333, "decode.d3.loss_cls": 0.24268, "decode.d3.loss_mask": 1.62586, "decode.d3.loss_dice": 2.05002, "decode.d4.loss_cls": 0.16803, "decode.d4.loss_mask": 1.60961, "decode.d4.loss_dice": 2.06556, "decode.d5.loss_cls": 0.13499, "decode.d5.loss_mask": 1.61581, "decode.d5.loss_dice": 2.05719, "decode.d6.loss_cls": 0.09959, "decode.d6.loss_mask": 1.61202, "decode.d6.loss_dice": 2.05441, "decode.d7.loss_cls": 0.11086, "decode.d7.loss_mask": 1.61115, "decode.d7.loss_dice": 2.0547, "decode.d8.loss_cls": 0.14426, "decode.d8.loss_mask": 1.60765, "decode.d8.loss_dice": 2.07581, "loss": 41.28131, "grad_norm": 178.45572, "time": 0.74225}
{"mode": "train", "epoch": 7, "iter": 400, "lr": 0.0, "memory": 6584, "data_time": 0.04736, "decode.loss_cls": 0.11919, "decode.loss_mask": 1.5795, "decode.loss_dice": 2.03291, "decode.d0.loss_cls": 2.25455, "decode.d0.loss_mask": 1.58506, "decode.d0.loss_dice": 2.19092, "decode.d1.loss_cls": 0.51478, "decode.d1.loss_mask": 1.54825, "decode.d1.loss_dice": 2.09302, "decode.d2.loss_cls": 0.25436, "decode.d2.loss_mask": 1.57053, "decode.d2.loss_dice": 2.07217, "decode.d3.loss_cls": 0.15622, "decode.d3.loss_mask": 1.58612, "decode.d3.loss_dice": 2.03922, "decode.d4.loss_cls": 0.10516, "decode.d4.loss_mask": 1.57731, "decode.d4.loss_dice": 2.04583, "decode.d5.loss_cls": 0.08321, "decode.d5.loss_mask": 1.58353, "decode.d5.loss_dice": 2.02848, "decode.d6.loss_cls": 0.06204, "decode.d6.loss_mask": 1.57732, "decode.d6.loss_dice": 2.03342, "decode.d7.loss_cls": 0.06861, "decode.d7.loss_mask": 1.588, "decode.d7.loss_dice": 2.03612, "decode.d8.loss_cls": 0.08375, "decode.d8.loss_mask": 1.57571, "decode.d8.loss_dice": 2.04504, "loss": 40.09032, "grad_norm": 212.9696, "time": 0.7451}
