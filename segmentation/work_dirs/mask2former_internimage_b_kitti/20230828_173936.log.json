{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce GTX 1080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 12.1, V12.1.66\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+cefb275", "seed": 378690365, "exp_name": "mask2former_internimage_b_kitti.py", "mmseg_version": "0.30.0+cefb275", "config": "num_things_classes = 0\nnum_stuff_classes = 2\nnum_classes = 2\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2Former',\n    pretrained=None,\n    backbone=dict(\n        type='InternImage',\n        core_op='DCNv3',\n        channels=112,\n        depths=[4, 4, 21, 4],\n        groups=[7, 14, 28, 56],\n        mlp_ratio=4.0,\n        drop_path_rate=0.4,\n        norm_layer='LN',\n        layer_scale=1.0,\n        offset_scale=1.0,\n        post_norm=True,\n        with_cp=False,\n        out_indices=(0, 1, 2, 3),\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'\n        )),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[112, 224, 448, 896],\n        feat_channels=256,\n        out_channels=256,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=0,\n        num_stuff_classes=2,\n        num_queries=100,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=256,\n                        feedforward_channels=1024,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True),\n                        with_cp=True),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=128, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=128, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=256,\n                    num_heads=8,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=256,\n                    feedforward_channels=2048,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True,\n                    with_cp=True),\n                feedforward_channels=2048,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[1.0, 1.0, 0.1]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(200, 664),\n            stride=(341, 341))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(200, 664),\n        stride=(341, 341)),\n    init_cfg=None)\ndataset_type = 'UPBDataset'\ndata_root = '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation'\nimg_norm_cfg = dict(\n    mean=[89.497, 93.675, 92.645], std=[76.422, 78.611, 80.487], to_rgb=True)\ncrop_size = (200, 664)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='LoadCategory'),\n    dict(type='Resize', img_scale=(664, 200), ratio_range=None),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[89.497, 93.675, 92.645],\n        std=[76.422, 78.611, 80.487],\n        to_rgb=True),\n    dict(type='Pad', size=(200, 664), pad_val=0, seg_pad_val=0),\n    dict(type='ToMask'),\n    dict(type='ToSoft', num_iter=12, kernel_size=(11, 11), std_dev=5),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels', 'category'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(200, 664),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir='self_supervised_labels_30',\n        split='splits/val_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='LoadCategory'),\n            dict(type='Resize', img_scale=(664, 200), ratio_range=None),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='Pad', size=(200, 664), pad_val=0, seg_pad_val=0),\n            dict(type='ToMask'),\n            dict(type='ToSoft', num_iter=12, kernel_size=(11, 11), std_dev=5),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_semantic_seg', 'gt_masks', 'gt_labels',\n                    'category'\n                ])\n        ]),\n    val=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(200, 664),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/storage/workspace/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(200, 664),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=2e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='CustomLayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(\n        num_layers=39,\n        layer_decay_rate=0.94,\n        depths=[5, 5, 24, 5],\n        offset_lr_scale=1.0))\noptimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=160000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)\nevaluation = dict(\n    interval=16000, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'\nwork_dir = 'work_dirs/mask2former_internimage_b_kitti'\ngpu_ids = range(0, 2)\nauto_resume = False\ndevice = 'cuda'\nseed = 378690365\n", "CLASSES": ["rest", "path"], "PALETTE": [[0, 0, 255], [255, 0, 0]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 6584, "data_time": 0.0062, "decode.loss_cls": 3.85428, "decode.loss_mask": 3.51841, "decode.loss_dice": 3.10415, "decode.d0.loss_cls": 2.31962, "decode.d0.loss_mask": 2.88637, "decode.d0.loss_dice": 3.01137, "decode.d1.loss_cls": 1.90864, "decode.d1.loss_mask": 2.8163, "decode.d1.loss_dice": 3.03821, "decode.d2.loss_cls": 1.96724, "decode.d2.loss_mask": 3.09672, "decode.d2.loss_dice": 2.97131, "decode.d3.loss_cls": 2.703, "decode.d3.loss_mask": 3.32246, "decode.d3.loss_dice": 3.15573, "decode.d4.loss_cls": 1.91526, "decode.d4.loss_mask": 3.37458, "decode.d4.loss_dice": 3.21253, "decode.d5.loss_cls": 2.57688, "decode.d5.loss_mask": 3.44147, "decode.d5.loss_dice": 3.13764, "decode.d6.loss_cls": 1.80606, "decode.d6.loss_mask": 3.48791, "decode.d6.loss_dice": 3.16936, "decode.d7.loss_cls": 3.64143, "decode.d7.loss_mask": 3.53269, "decode.d7.loss_dice": 3.29356, "decode.d8.loss_cls": 3.36888, "decode.d8.loss_mask": 3.52015, "decode.d8.loss_dice": 3.13281, "loss": 90.28503, "grad_norm": 356.19261, "time": 0.68718}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0, "memory": 6584, "data_time": 0.04583, "decode.loss_cls": 2.10284, "decode.loss_mask": 3.60103, "decode.loss_dice": 2.96551, "decode.d0.loss_cls": 2.29631, "decode.d0.loss_mask": 2.56305, "decode.d0.loss_dice": 2.82817, "decode.d1.loss_cls": 1.65173, "decode.d1.loss_mask": 2.38262, "decode.d1.loss_dice": 2.84535, "decode.d2.loss_cls": 1.50089, "decode.d2.loss_mask": 2.72485, "decode.d2.loss_dice": 2.75525, "decode.d3.loss_cls": 1.94228, "decode.d3.loss_mask": 3.07522, "decode.d3.loss_dice": 2.94919, "decode.d4.loss_cls": 1.38062, "decode.d4.loss_mask": 3.2527, "decode.d4.loss_dice": 3.08946, "decode.d5.loss_cls": 1.58461, "decode.d5.loss_mask": 3.40591, "decode.d5.loss_dice": 3.03724, "decode.d6.loss_cls": 1.27095, "decode.d6.loss_mask": 3.45747, "decode.d6.loss_dice": 2.94744, "decode.d7.loss_cls": 1.90166, "decode.d7.loss_mask": 3.4922, "decode.d7.loss_dice": 3.10314, "decode.d8.loss_cls": 1.76837, "decode.d8.loss_mask": 3.61467, "decode.d8.loss_dice": 2.92962, "loss": 78.42033, "grad_norm": 216.59195, "time": 0.71331}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.0, "memory": 6584, "data_time": 0.04787, "decode.loss_cls": 1.16992, "decode.loss_mask": 3.37032, "decode.loss_dice": 2.96387, "decode.d0.loss_cls": 2.30259, "decode.d0.loss_mask": 1.79543, "decode.d0.loss_dice": 2.62513, "decode.d1.loss_cls": 1.29059, "decode.d1.loss_mask": 1.51487, "decode.d1.loss_dice": 2.60286, "decode.d2.loss_cls": 1.12125, "decode.d2.loss_mask": 1.8282, "decode.d2.loss_dice": 2.46688, "decode.d3.loss_cls": 1.19293, "decode.d3.loss_mask": 2.00392, "decode.d3.loss_dice": 2.65719, "decode.d4.loss_cls": 1.12797, "decode.d4.loss_mask": 2.22832, "decode.d4.loss_dice": 2.75901, "decode.d5.loss_cls": 1.13008, "decode.d5.loss_mask": 2.87948, "decode.d5.loss_dice": 2.85794, "decode.d6.loss_cls": 1.16583, "decode.d6.loss_mask": 2.92062, "decode.d6.loss_dice": 2.82732, "decode.d7.loss_cls": 1.15947, "decode.d7.loss_mask": 3.15233, "decode.d7.loss_dice": 2.90799, "decode.d8.loss_cls": 1.13509, "decode.d8.loss_mask": 3.30484, "decode.d8.loss_dice": 2.89105, "loss": 65.35328, "grad_norm": 178.01607, "time": 0.72138}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0, "memory": 6584, "data_time": 0.04943, "decode.loss_cls": 1.10929, "decode.loss_mask": 2.18713, "decode.loss_dice": 2.58686, "decode.d0.loss_cls": 2.30528, "decode.d0.loss_mask": 1.38959, "decode.d0.loss_dice": 2.46986, "decode.d1.loss_cls": 1.07088, "decode.d1.loss_mask": 1.18907, "decode.d1.loss_dice": 2.39448, "decode.d2.loss_cls": 0.94757, "decode.d2.loss_mask": 1.31756, "decode.d2.loss_dice": 2.2916, "decode.d3.loss_cls": 0.88988, "decode.d3.loss_mask": 1.31086, "decode.d3.loss_dice": 2.36937, "decode.d4.loss_cls": 0.95954, "decode.d4.loss_mask": 1.33273, "decode.d4.loss_dice": 2.35659, "decode.d5.loss_cls": 0.98508, "decode.d5.loss_mask": 1.29223, "decode.d5.loss_dice": 2.35637, "decode.d6.loss_cls": 1.02335, "decode.d6.loss_mask": 1.46406, "decode.d6.loss_dice": 2.40241, "decode.d7.loss_cls": 1.08403, "decode.d7.loss_mask": 1.52072, "decode.d7.loss_dice": 2.41818, "decode.d8.loss_cls": 1.07413, "decode.d8.loss_mask": 1.90204, "decode.d8.loss_dice": 2.50668, "loss": 50.50739, "grad_norm": 163.31778, "time": 0.73009}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0, "memory": 6584, "data_time": 0.00406, "decode.loss_cls": 0.87758, "decode.loss_mask": 1.49923, "decode.loss_dice": 2.19693, "decode.d0.loss_cls": 2.30345, "decode.d0.loss_mask": 1.48185, "decode.d0.loss_dice": 2.31302, "decode.d1.loss_cls": 0.85382, "decode.d1.loss_mask": 1.45788, "decode.d1.loss_dice": 2.23039, "decode.d2.loss_cls": 0.75197, "decode.d2.loss_mask": 1.54966, "decode.d2.loss_dice": 2.16288, "decode.d3.loss_cls": 0.58865, "decode.d3.loss_mask": 1.52355, "decode.d3.loss_dice": 2.21025, "decode.d4.loss_cls": 0.58905, "decode.d4.loss_mask": 1.54361, "decode.d4.loss_dice": 2.19202, "decode.d5.loss_cls": 0.6, "decode.d5.loss_mask": 1.4606, "decode.d5.loss_dice": 2.13527, "decode.d6.loss_cls": 0.59388, "decode.d6.loss_mask": 1.51249, "decode.d6.loss_dice": 2.20132, "decode.d7.loss_cls": 0.67996, "decode.d7.loss_mask": 1.44711, "decode.d7.loss_dice": 2.18632, "decode.d8.loss_cls": 0.78796, "decode.d8.loss_mask": 1.52038, "decode.d8.loss_dice": 2.19709, "loss": 45.64815, "grad_norm": 153.0628, "time": 0.68305}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0, "memory": 6584, "data_time": 0.04717, "decode.loss_cls": 0.53886, "decode.loss_mask": 1.58617, "decode.loss_dice": 2.14373, "decode.d0.loss_cls": 2.30352, "decode.d0.loss_mask": 1.54195, "decode.d0.loss_dice": 2.27272, "decode.d1.loss_cls": 0.69248, "decode.d1.loss_mask": 1.56879, "decode.d1.loss_dice": 2.16672, "decode.d2.loss_cls": 0.5089, "decode.d2.loss_mask": 1.62827, "decode.d2.loss_dice": 2.1434, "decode.d3.loss_cls": 0.33961, "decode.d3.loss_mask": 1.57917, "decode.d3.loss_dice": 2.16689, "decode.d4.loss_cls": 0.30199, "decode.d4.loss_mask": 1.59114, "decode.d4.loss_dice": 2.14187, "decode.d5.loss_cls": 0.28816, "decode.d5.loss_mask": 1.60533, "decode.d5.loss_dice": 2.11948, "decode.d6.loss_cls": 0.27078, "decode.d6.loss_mask": 1.58895, "decode.d6.loss_dice": 2.16312, "decode.d7.loss_cls": 0.33833, "decode.d7.loss_mask": 1.59136, "decode.d7.loss_dice": 2.13891, "decode.d8.loss_cls": 0.43071, "decode.d8.loss_mask": 1.59122, "decode.d8.loss_dice": 2.15253, "loss": 43.49508, "grad_norm": 160.74854, "time": 0.72036}
{"mode": "train", "epoch": 6, "iter": 350, "lr": 0.0, "memory": 6584, "data_time": 0.04735, "decode.loss_cls": 0.28657, "decode.loss_mask": 1.59398, "decode.loss_dice": 2.09223, "decode.d0.loss_cls": 2.30321, "decode.d0.loss_mask": 1.53988, "decode.d0.loss_dice": 2.23559, "decode.d1.loss_cls": 0.49851, "decode.d1.loss_mask": 1.59135, "decode.d1.loss_dice": 2.12007, "decode.d2.loss_cls": 0.29387, "decode.d2.loss_mask": 1.56413, "decode.d2.loss_dice": 2.13353, "decode.d3.loss_cls": 0.20013, "decode.d3.loss_mask": 1.5754, "decode.d3.loss_dice": 2.11388, "decode.d4.loss_cls": 0.1641, "decode.d4.loss_mask": 1.58712, "decode.d4.loss_dice": 2.0865, "decode.d5.loss_cls": 0.1442, "decode.d5.loss_mask": 1.5903, "decode.d5.loss_dice": 2.08725, "decode.d6.loss_cls": 0.12654, "decode.d6.loss_mask": 1.58396, "decode.d6.loss_dice": 2.10351, "decode.d7.loss_cls": 0.16169, "decode.d7.loss_mask": 1.59064, "decode.d7.loss_dice": 2.09491, "decode.d8.loss_cls": 0.20774, "decode.d8.loss_mask": 1.59782, "decode.d8.loss_dice": 2.10402, "loss": 41.37261, "grad_norm": 179.95469, "time": 0.73008}
