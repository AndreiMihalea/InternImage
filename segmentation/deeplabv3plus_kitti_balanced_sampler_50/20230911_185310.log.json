{"env_info": "sys.platform: linux\nPython: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce GTX 1080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 12.1, V12.1.66\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.7.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+cefb275", "seed": 42696338, "exp_name": "deeplabv3plus_kitti.py", "mmseg_version": "0.30.0+cefb275", "config": "num_things_classes = 0\nnum_stuff_classes = 2\nnum_classes = 2\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='DepthwiseSeparableASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=256,\n        c1_channels=48,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(type='FocalLoss', use_sigmoid=True, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(type='FocalLoss', use_sigmoid=True, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'UPBDataset'\ndata_root = '/mnt/datadisk/andreim/kitti/data_odometry_color/segmentation'\nimg_norm_cfg = dict(\n    mean=[89.497, 93.675, 92.645], std=[76.422, 78.611, 80.487], to_rgb=True)\ncrop_size = (193, 640)\nimg_scale = (193, 640)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='LoadCategory'),\n    dict(\n        type='PerspectiveAug',\n        k=[[0.58, 0, 0.5], [0, 1.92, 0.5], [0, 0, 1]],\n        m=[[1, 0, 0, 0.0], [0, 1, 0, 1.68], [0, 0, 1, 1.65], [0, 0, 0, 1]]),\n    dict(type='Resize', img_scale=(193, 640), ratio_range=None),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[89.497, 93.675, 92.645],\n        std=[76.422, 78.611, 80.487],\n        to_rgb=True),\n    dict(type='Pad', size=(193, 640), pad_val=0, seg_pad_val=0),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(193, 640),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=10,\n    workers_per_gpu=4,\n    train=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/datadisk/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir='self_supervised_labels_30',\n        split='splits/val_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='LoadCategory'),\n            dict(\n                type='PerspectiveAug',\n                k=[[0.58, 0, 0.5], [0, 1.92, 0.5], [0, 0, 1]],\n                m=[[1, 0, 0, 0.0], [0, 1, 0, 1.68], [0, 0, 1, 1.65],\n                   [0, 0, 0, 1]]),\n            dict(type='Resize', img_scale=(193, 640), ratio_range=None),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[89.497, 93.675, 92.645],\n                std=[76.422, 78.611, 80.487],\n                to_rgb=True),\n            dict(type='Pad', size=(193, 640), pad_val=0, seg_pad_val=0),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/datadisk/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/datadisk/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(193, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='UPBDataset',\n        data_root=\n        '/mnt/datadisk/andreim/kitti/data_odometry_color/segmentation',\n        img_dir='images',\n        ann_dir=\n        '/mnt/datadisk/andreim/kitti/data_odometry_color/segmentation_gt/self_supervised_labels_30',\n        split='splits/test_30.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(193, 640),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[89.497, 93.675, 92.645],\n                        std=[76.422, 78.611, 80.487],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=2e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='CustomLayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(\n        num_layers=39,\n        layer_decay_rate=0.94,\n        depths=[5, 5, 24, 5],\n        offset_lr_scale=1.0))\noptimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=400,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=64000)\ncheckpoint_config = dict(by_epoch=False, interval=200, max_keep_ckpts=1)\nevaluation = dict(\n    interval=2000, metric='mIoU', pre_eval=True, save_best='mIoU')\nwork_dir = 'work_dirs/deeplabv3plus_kitti_balanced_sampler_50'\ngpu_ids = range(0, 2)\nauto_resume = False\ndevice = 'cuda'\nseed = 42696338\n", "CLASSES": ["rest", "path"], "PALETTE": [[0, 0, 255], [255, 0, 0]], "hook_msgs": {}}
